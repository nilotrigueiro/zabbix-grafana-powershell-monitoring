{
  "__inputs": [
    {
      "name": "DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE",
      "label": "alexanderzobnin-zabbix-datasource",
      "description": "",
      "type": "datasource",
      "pluginId": "alexanderzobnin-zabbix-datasource",
      "pluginName": "Zabbix"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "datasource",
      "id": "alexanderzobnin-zabbix-datasource",
      "name": "Zabbix",
      "version": "5.1.0"
    },
    {
      "type": "panel",
      "id": "bargauge",
      "name": "Bar gauge",
      "version": ""
    },
    {
      "type": "panel",
      "id": "gapit-htmlgraphics-panel",
      "name": "HTML graphics",
      "version": "2.1.1"
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "12.0.0"
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "Monitoramento de Hypervisor Criado por Nilo _Trigueiro\n\nwww.linkedin.com/in/nilotrigueiro\n",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "gridPos": {
        "h": 2,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 3,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"\n  background: linear-gradient(135deg, #1f1f1f, #2a2a2a);\n  padding: 10px;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);\n  text-align: center;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  color: #ffffff;\n  margin: 2px 4px 2px 4px; /* top right bottom left */\n\">\n  <h1 style=\"\n    font-size: 22px;\n    font-weight: 600;\n    margin: 0;\n    background: linear-gradient(to right, #00bcd4, #4caf50);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  \">\n    MONITORAMENTO DO HYPERVISOR 25052RECDF\n  </h1>\n</div>\n",
        "mode": "html"
      },
      "pluginVersion": "12.0.0",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "fixed"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-purple"
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Field"
            },
            "properties": []
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Total"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "mode": "continuous-BlPu"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Valores"
            },
            "properties": [
              {
                "id": "color"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 20,
        "x": 0,
        "y": 2
      },
      "id": 85,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "/* Estilo geral para body */\nbody {\n  margin: 0;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #121212;\n  color: #fff;\n  line-height: 1.6;\n  display: flex;\n  gap: 20px;\n  padding: 30px;\n  box-sizing: border-box;\n}\n\n/* Card do sistema operacional */\n.os-card {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid #444;\n    padding: 20px;\n    border-radius: 12px;\n    background-color: #1e1e1e;\n    color: #fff;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    transition: transform 0.3s ease;\n    min-width: 20%;\n    max-width: 25%;\n    min-height: 185px;\n    max-height: 185px;\n    margin-left: 20px;\n    margin-right: 20px;\n    align-content: center;\n    justify-content: center;\n}\n\n.os-card:hover {\n  transform: scale(1.01);\n}\n\n.server-image-wrapper {\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: 250px;\n}\n\n.server-image {\n  width: 100%;\n  height: auto;\n  object-fit: contain;\n  border-radius: 8px;\n}\n\n.os-info-row {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n  width: 100%;\n}\n\n.os-image {\n  width: 60px;\n  height: 60px;\n  object-fit: contain;\n}\n\n.os-info {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n}\n\n.os-title {\n  font-weight: 700;\n  font-size: 18px;\n  margin-bottom: 4px;\n  color: #aaa;\n}\n\n.os-value {\n  font-size: 14px;\n  font-weight: 600;\n  color: #fff;\n}\n\n/* Container de informações do servidor */\n.server-info-horizontal {\n  background-color: #1e1e1e;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n  padding: 20px 30px;\n  color: #fff;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  min-width: 70%;\n  max-width: 75%;\n  min-height: 230px;\n  max-height: 230px;\n  margin-left: 20px;\n  margin-right: 20px;\n  justify-content: space-between;\n  align-items: stretch;\n}\n\n.title-line {\n  height: 1px;\n  background-color: #ccc; /* ou qualquer cor que combine com seu design */\n  width: 100%;\n  margin-top: 5px;\n  margin-bottom: 10px;\n}\n\n/* Cada linha horizontal dentro do container */\n.server-info-horizontal .row {\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  overflow-x: auto;\n  min-width: 0;\n  align-content: center;\n  flex-direction: row;\n}\n\n/* Cada bloco de informação */\n.server-info-horizontal .info-block {\n  flex: 0 1 auto; /* adapta o tamanho ao conteúdo */\n  display: flex;\n  flex-direction: column;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  white-space: normal;\n}\n\n/* Label dos blocos */\n.server-info-horizontal .label {\n  font-size: 0.85rem;\n  font-weight: 600;\n  color: #aaa;\n  margin-bottom: 6px;\n  cursor: help;\n}\n\n/* Valor dos blocos */\n.server-info-horizontal .value {\n  font-size: 1rem;\n  font-weight: 700;\n  color: #fff;\n  word-break: break-word;\n  white-space: normal;\n  overflow-wrap: anywhere;\n}\n\n/* Divisor entre os blocos */\n.server-info-horizontal .divider {\n  width: 1px;\n  background-color: #333;\n  margin: 0 8px;\n  height: auto;\n}\n\n/* Responsividade */\n@media (max-width: 900px) {\n  body {\n    flex-direction: column;\n    padding: 15px;\n  }\n  .os-card {\n    flex: none;\n    width: 100%;\n    max-width: 500px;\n    margin-bottom: 30px;\n  }\n  .server-info-horizontal {\n    width: 100%;\n  }\n  .server-info-horizontal .row {\n    flex-wrap: wrap;\n  }\n  .server-info-horizontal .info-block {\n    min-width: 140px;\n  }\n  .server-info-horizontal .divider {\n    display: none;\n  }\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Servidor e SO</title>\n\n  <!-- Link para o CSS externo -->\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n<body>\n\n  <!-- Card do SO e imagem do servidor -->\n  <!-- src antigo: https://media.xbyte.com/servers/Dell-PowerEdge-R540-Server_01.png -->\n  <div class=\"os-card\">\n    <div class=\"server-image-wrapper\">\n      <img\n        src=\"/public/img/nilo/servidores/Dell-PowerEdge-R540.png\"\n        alt=\"Servidor\"\n        class=\"server-image\"\n      />\n    </div>\n\n    <div class=\"os-info-row\">\n      <img\n        src=\"https://img.icons8.com/ios_filled/512/228BE6/windows-10.png\"\n        alt=\"OS Logo\"\n        class=\"os-image\"\n        id=\"os-image\"\n      />\n      <div class=\"os-info\">\n        <div class=\"os-title\">Sistema Operacional</div>\n        <div id=\"htmlgraphics-value\" class=\"os-value\">Windows Server 2019</div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Informações do servidor com layout horizontal mais compacto -->\n  <div class=\"server-info-horizontal\">\n      <div class=\"container1-cpu\">\n          <div class=\"title1\">Informações Físicas do Servidor</div>\n          <div class=\"title-line\"></div>\n          <div class=\"row\">\n          <div class=\"info-block\">\n              <div class=\"label\" data-tooltip=\"Fabricante do servidor\">Fabricante</div>\n              <div id=\"fabricante\" class=\"value\">Dell Inc.</div>\n          </div>\n          <div class=\"divider\"></div>\n          <div class=\"info-block\">\n              <div class=\"label\" data-tooltip=\"Modelo do servidor\">Modelo</div>\n              <div id=\"modelo\" class=\"value\">PowerEdge R540</div>\n          </div>\n          <div class=\"divider\"></div>\n          <div class=\"info-block\">\n              <div class=\"label\" data-tooltip=\"Número de série do servidor\">Nº de Série</div>\n              <div id=\"numero-serie\" class=\"value\">18NDYR2</div>\n          </div>\n          <div class=\"divider\"></div>\n          <div class=\"info-block\">\n              <div class=\"label\" data-tooltip=\"Modelo do processador\">Processador</div>\n              <div id=\"processador\" class=\"value\">Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz</div>\n          </div>\n          <div class=\"divider\"></div>\n          <div class=\"info-block\">\n              <div class=\"label\" data-tooltip=\"Número de núcleos físicos\">Núcleos</div>\n              <div id=\"nucleos\" class=\"value\">16</div>\n          </div>\n          </div>\n      </div>\n\n      <div class=\"container2-cpu\" >\n          <div class=\"title2\">Informações Físicas da Memória</div>\n          <div class=\"title-line\"></div>\n          <div class=\"row\">\n          <div class=\"info-block\">\n              <div class=\"label\" data-tooltip=\"Total de slots de memória disponíveis\">Slots Memória (total)</div>\n              <div id=\"total-slots\" class=\"value\">16</div>\n          </div>\n          <div class=\"divider\"></div>\n          <div class=\"info-block\">\n              <div class=\"label\" data-tooltip=\"Quantidade de slots de memória ocupados\">Slots Ocupados</div>\n              <div id=\"slots-ocupados\" class=\"value\">8</div>\n          </div>\n          <div class=\"divider\"></div>\n          <div class=\"info-block\">\n              <div class=\"label\" data-tooltip=\"Tipo da memória do módulo 1\">Tipo Memória Módulo 1</div>\n              <div id=\"tipo-memoria\" class=\"value\">DDR4</div>\n          </div>\n          <div class=\"divider\"></div>\n          <div class=\"info-block\">\n              <div class=\"label\" data-tooltip=\"Velocidade da memória do módulo 1 em MHz\">Velocidade Memória Módulo 1 (MHz)</div>\n              <div id=\"velocidade-memoria\" class=\"value\">2666</div>\n          </div>\n          <div class=\"divider\"></div>\n          <div class=\"info-block\">\n              <div class=\"label\" data-tooltip=\"Tamanho da memória do módulo 1 em GB\">Tamanho Memória Módulo 1 (GB)</div>\n              <div id=\"size-memoria\" class=\"value\">16</div>\n          </div>\n          </div>\n      </div>\n      \n  </div>\n\n</body>\n</html>\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "// Cria uma referência local para evitar conflito\nconst serverData = data;\n\n// --- Função auxiliar para pegar valor da série pelo índice ---\nfunction getSerieValue(index) {\n  const serie = serverData.series[index];\n  if (!serie) return \"Sem dado\";\n\n  const valueField = serie.fields.find(f => f.name === \"Value\");\n  if (!valueField) return \"Sem dado\";\n\n  const lastIndex = valueField.values.length - 1;\n  return valueField.values.get(lastIndex);\n}\n\n// Dados do servidor\nconst fabricante = getSerieValue(1);        \nconst modelo = getSerieValue(2);            \nconst numeroSerie = getSerieValue(3);       \nconst processadorRaw = getSerieValue(4);    \nconst nucleosRaw = getSerieValue(5);        \nconst totalSlotsMemoria = getSerieValue(6); \nconst slotsOcupados = getSerieValue(7);     \nconst tipoMemoriaModulo1 = getSerieValue(8); \nconst velocidadeMemoriaModulo1 = getSerieValue(9); \nconst sizeMemoriaModulo1 = getSerieValue(10);       \n\n// Processador com contagem e destaque\nlet processador = \"Sem dado\";\nif (processadorRaw) {\n  try {\n    const lista = JSON.parse(processadorRaw); // Correção aqui\n    const contagem = {};\n    lista.forEach(cpu => {\n      contagem[cpu] = (contagem[cpu] || 0) + 1;\n    });\n    const descricoes = Object.entries(contagem).map(([modelo, quantidade]) => {\n      const plural = quantidade > 1 ? \"processadores\" : \"processador\";\n      return `Existem <span class=\"highlight\">${quantidade}</span> ${plural} – Modelo ${modelo}`;\n    });\n    processador = descricoes.join(\"<br>\");\n  } catch {\n    processador = processadorRaw;\n  }\n}\n\n// Núcleos físicos\nlet nucleos = \"Sem dado\";\nif (nucleosRaw) {\n  try {\n    const lista = JSON.parse(nucleosRaw);\n    nucleos = lista.join(\" + \");\n  } catch {\n    nucleos = nucleosRaw;\n  }\n}\n\n// Atualizar DOM com os dados do servidor\nhtmlNode.getElementById('fabricante').textContent = fabricante;\nhtmlNode.getElementById('modelo').textContent = modelo;\nhtmlNode.getElementById('numero-serie').textContent = numeroSerie;\nhtmlNode.getElementById('processador').innerHTML = processador;\nhtmlNode.getElementById('nucleos').textContent = nucleos;\n\n// Atualizar DOM com novos dados de memória\nhtmlNode.getElementById('total-slots').textContent = totalSlotsMemoria ?? \"Sem dado\";\nhtmlNode.getElementById('slots-ocupados').textContent = slotsOcupados ?? \"Sem dado\";\nhtmlNode.getElementById('tipo-memoria').textContent = tipoMemoriaModulo1 ?? \"Sem dado\";\nhtmlNode.getElementById('velocidade-memoria').textContent = velocidadeMemoriaModulo1 ?? \"Sem dado\";\nhtmlNode.getElementById('size-memoria').textContent = sizeMemoriaModulo1 ?? \"Sem dado\";\n\n// Dados do sistema operacional\nconst htmlgraphicsValue = htmlNode.getElementById('htmlgraphics-value');\nconst osImage = htmlNode.getElementById('os-image');\n\nif (htmlgraphicsValue) {\n  const osFieldNames = [\n    \"Sistema Operacional\",\n    \"SistemaOperacional\",\n    \"OS\",\n    \"Operating System\",\n    \"operatingsystem\",\n  ];\n\n  let osSerie = serverData.series.find(serie =>\n    osFieldNames.some(name => serie.name?.toLowerCase() === name.toLowerCase())\n  );\n\n  if (!osSerie) osSerie = serverData.series[0];\n\n  const osField = osSerie.fields.find(f => f.name === \"Value\");\n  const lastIndex = osField?.values.length - 1;\n  const lastValue = osField?.values.get(lastIndex) ?? \"Desconhecido\";\n\n  htmlgraphicsValue.title = lastValue;\n\n  let displayName = lastValue;\n\n  const windowsMatch = lastValue.match(/(Windows\\s+Server\\s+\\d+\\s*(Datacenter|Standard)?)/i);\n  const ubuntuMatch = lastValue.match(/(Ubuntu\\s+\\d{2}\\.\\d{2})/i);\n  const linuxMatch = lastValue.match(/(Linux)/i);\n\n  if (windowsMatch) {\n    displayName = windowsMatch[1].trim();\n  } else if (ubuntuMatch) {\n    displayName = ubuntuMatch[1];\n  } else if (linuxMatch) {\n    displayName = linuxMatch[1];\n  }\n\n  htmlgraphicsValue.textContent = displayName;\n\n  if (osImage) {\n    const osLower = lastValue.toLowerCase();\n\n    if (osLower.includes('windows')) {\n      osImage.src = 'https://img.icons8.com/ios_filled/512/228BE6/windows-10.png';\n    } else if (osLower.includes('ubuntu')) {\n      osImage.src = 'https://img.favpng.com/21/17/1/ubuntu-server-edition-canonical-linux-installation-png-favpng-AJ5NA4qNNHz1ejngJ347t2zC5_t.jpg';\n    } else if (osLower.includes('linux')) {\n      osImage.src = 'https://cdn.pixabay.com/photo/2016/07/20/21/03/tux-1531289_960_720.png';\n    } else {\n      osImage.src = 'https://upload.wikimedia.org/wikipedia/commons/e/e0/Question_mark_white_icon.svg';\n    }\n  }\n}\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Operating system"
          },
          "itemTag": {
            "filter": "component: os"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Sistema Operacional",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Fabricante do Servidor"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Fabricante do Servidor",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Modelo do Servidor"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Modelo do Servidor",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Número de Série"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Número de Série",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Modelo do Processador"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Modelo do Processador",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Núcleos Físicos"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Núcleos Físicos",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Total de slots de memória"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Total de slots de memória",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Total de slots ocupados"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Total de slots ocupados",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Tipo memória módulo 1"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Tipo memória",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Velocidade memória módulo 1"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Velocidade memória",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Size GB memória módulo 1"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Size GB memória",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 4,
        "x": 20,
        "y": 2
      },
      "id": 95,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans, sans-serif;\n  box-sizing: border-box;\n}\n\n.wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n  padding: 10px;\n}\n\n.box {\n  display: flex;\n  flex-direction: column;       /* empilhado vertical */\n  align-items: center;\n  border: 2px solid #555;\n  border-radius: 10px;\n  padding: 20px 30px;\n  background-color: #1f1f1f;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n  width: 100%;\n  max-width: 360px;\n  height: 100%;\n  transition: border-color 0.3s ease, color 0.3s ease;\n  text-align: center;\n}\n\n/* Título */\n.label {\n  font-size: 1.5em;\n  color: #aaa;\n  margin-bottom: 20px;\n  user-select: none;\n}\n\n/* Valor (dias) */\n.value {\n  font-size: 4em;\n  font-weight: bold;\n  color: #00d1b2;\n  margin-bottom: 12px;\n  user-select: none;\n  transition: color 0.3s ease;\n}\n\n/* Aviso texto */\n.status-text {\n  font-size: 1.2em;\n  font-weight: 600;\n  color: #00d1b2;\n  user-select: none;\n  transition: color 0.3s ease;\n}\n\n/* Status colors */\n.box.normal {\n  border-color: #00d1b2;\n}\n\n.box.normal .value,\n.box.normal .status-text {\n  color: #00d1b2;\n}\n\n.box.warning {\n  border-color: #d6a500;\n}\n\n.box.warning .value,\n.box.warning .status-text {\n  color: #d6a500;\n}\n\n.box.alert {\n  border-color: #d64545;\n}\n\n.box.alert .value,\n.box.alert .status-text {\n  color: #d64545;\n}\n\n.box.danger {\n  border-color: #a50a0a;\n}\n\n.box.danger .value,\n.box.danger .status-text {\n  color: #a50a0a;\n}\n\n.system-name {\n  font-size: 1.1em;\n  color: #888;\n  margin-bottom: 16px;\n  user-select: none;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div class=\"wrapper\">\n  <div class=\"box\" id=\"uptime-card\">\n    <div class=\"label\">Uptime do Servidor</div>\n    <div class=\"value\" id=\"htmlgraphics-value\">--</div>\n    <div class=\"status-text\" id=\"uptime-status\">--</div>\n  </div>\n</div>\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "const uptimeCard = htmlNode.getElementById('uptime-card');\nconst uptimeValue = htmlNode.getElementById('htmlgraphics-value');\nconst uptimeStatus = htmlNode.getElementById('uptime-status');\n\nif (uptimeCard && uptimeValue && uptimeStatus) {\n  const uptimeField = data.series[0]?.fields[1]; // ajuste conforme necessário\n\n  if (uptimeField) {\n    const length = uptimeField.values.length;\n    const uptimeSeconds = uptimeField.values.get(length - 1);\n    const uptimeDays = Math.floor(uptimeSeconds / 86400);\n\n    uptimeValue.textContent = `${uptimeDays} dia${uptimeDays !== 1 ? 's' : ''}`;\n\n    // Remove todas as classes de status\n    uptimeCard.classList.remove('normal', 'warning', 'alert', 'danger');\n\n    // Define aviso e cor conforme o tempo\n    if (uptimeDays <= 10) {\n      uptimeStatus.textContent = 'Uptime Normal';\n      uptimeCard.classList.add('normal');\n    } else if (uptimeDays <= 20) {\n      uptimeStatus.textContent = 'Atenção';\n      uptimeCard.classList.add('warning');\n    } else if (uptimeDays <= 30) {\n      uptimeStatus.textContent = 'Alerta Elevado';\n      uptimeCard.classList.add('alert');\n    } else {\n      uptimeStatus.textContent = 'Ação Imediata';\n      uptimeCard.classList.add('danger');\n    }\n\n  } else {\n    uptimeValue.textContent = '--';\n    uptimeStatus.textContent = 'Sem dados';\n    uptimeCard.classList.remove('normal', 'warning', 'alert', 'danger');\n  }\n}\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Uptime"
          },
          "itemTag": {
            "filter": "component: system"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Uptime",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "System name"
          },
          "itemTag": {
            "filter": "component: system"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Nome do sistema",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-blues"
          },
          "decimals": 0,
          "displayName": "QUANTIDADE DE CPU",
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 0,
        "y": 9
      },
      "id": 74,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans, sans-serif;\n  box-sizing: border-box;\n}\n\n.wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%; /* Garante que a wrapper ocupe todo o painel */\n  padding: 10px;\n}\n\n.box {\n  display: flex;\n  flex-direction: row;           /* Lado a lado */\n  align-items: center;\n  justify-content: space-between; /* Espaço entre label e valor */\n  border: 2px solid #555;\n  border-radius: 10px;\n  padding: 15px 20px;\n  background-color: #1f1f1f;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n  width: 100%;                  /* Faz com que a .box acompanhe o tamanho do painel */\n  max-width: 100%;              /* Nunca ultrapassa os limites do painel */\n  height: 100%;                 /* Opcional: ocupa toda a altura também */\n}\n\n/* Título (vCPUs) */\n.label {\n  font-size: 1.2em;\n  color: #aaa;\n  text-align: left;\n  flex: 1;\n}\n\n/* Valor (número) */\n.value {\n  font-size: 2.5em;\n  font-weight: bold;\n  color: #00d1b2;\n  text-align: right;\n  flex: 1;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div class=\"container\">\n  <div class=\"box\">\n    <div class=\"label\">vCPUs</div>\n    <div class=\"value\" id=\"htmlgraphics-value\">--</div>\n  </div>\n</div>\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "const htmlgraphicsValue = htmlNode.querySelector('#htmlgraphics-value');\n\n// Garante que há série e campo de número\nif (htmlgraphicsValue && data.series.length > 0) {\n  const series = data.series[0];\n  \n  // Busca o primeiro campo numérico (ex: vCPUs)\n  const valueField = series.fields.find(f => f.type === 'number');\n\n  if (valueField && valueField.values.length > 0) {\n    const lastValue = valueField.values.get(valueField.values.length - 1);\n    htmlgraphicsValue.textContent = lastValue;\n  } else {\n    htmlgraphicsValue.textContent = \"Sem dados\";\n  }\n} else {\n  htmlgraphicsValue.textContent = \"Sem série\";\n}\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": "CPU"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Number of cores"
          },
          "itemTag": {
            "filter": "component: cpu"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-blues"
          },
          "decimals": 0,
          "displayName": "QUANTIDADE DE CPU",
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 5,
        "y": 9
      },
      "id": 76,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans, sans-serif;\n  box-sizing: border-box;\n}\n\n.wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%; /* Garante que a wrapper ocupe todo o painel */\n  padding: 10px;\n}\n\n.box {\n  display: flex;\n  flex-direction: row;           /* Lado a lado */\n  align-items: center;\n  justify-content: space-between; /* Espaço entre label e valor */\n  border: 2px solid #555;\n  border-radius: 10px;\n  padding: 15px 20px;\n  background-color: #1f1f1f;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n  width: 100%;                  /* Faz com que a .box acompanhe o tamanho do painel */\n  max-width: 100%;              /* Nunca ultrapassa os limites do painel */\n  height: 100%;                 /* Opcional: ocupa toda a altura também */\n}\n\n/* Título (vCPUs) */\n.label {\n  font-size: 1.2em;\n  color: #aaa;\n  text-align: left;\n  flex: 1;\n}\n\n/* Valor (número) */\n.value {\n  font-size: 2.5em;\n  font-weight: bold;\n  color: #00d1b2;\n  text-align: right;\n  flex: 1;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div class=\"container\">\n  <div class=\"box\">\n    <div class=\"label\">Memória Total</div>\n    <div class=\"value\" id=\"htmlgraphics-value\">--</div>\n  </div>\n</div>\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "const htmlgraphicsValue = htmlNode.querySelector('#htmlgraphics-value');\n\nif (htmlgraphicsValue && data.series.length > 0) {\n  const series = data.series[0];\n  const valueField = series.fields.find(f => f.type === 'number');\n\n  if (valueField && valueField.values.length > 0) {\n    const bytes = valueField.values.get(valueField.values.length - 1);\n    const gb = bytes / (1024 ** 3);\n    htmlgraphicsValue.textContent = gb.toFixed(2) + \" GB\";\n  } else {\n    htmlgraphicsValue.textContent = \"Sem dados\";\n  }\n}\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": "CPU"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Total memory"
          },
          "itemTag": {
            "filter": "component: memory"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-blues"
          },
          "decimals": 0,
          "displayName": "QUANTIDADE DE CPU",
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 12,
        "y": 9
      },
      "id": 77,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans, sans-serif;\n  box-sizing: border-box;\n}\n\n.wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%; /* Garante que a wrapper ocupe todo o painel */\n  padding: 10px;\n}\n\n.box {\n  display: flex;\n  flex-direction: row;           /* Lado a lado */\n  align-items: center;\n  justify-content: space-between; /* Espaço entre label e valor */\n  border: 2px solid #555;\n  border-radius: 10px;\n  padding: 15px 20px;\n  background-color: #1f1f1f;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n  width: 100%;                  /* Faz com que a .box acompanhe o tamanho do painel */\n  max-width: 100%;              /* Nunca ultrapassa os limites do painel */\n  height: 100%;                 /* Opcional: ocupa toda a altura também */\n}\n\n/* Título (vCPUs) */\n.label {\n  font-size: 1.2em;\n  color: #aaa;\n  text-align: left;\n  flex: 1;\n}\n\n/* Valor (número) */\n.value {\n  font-size: 2.5em;\n  font-weight: bold;\n  color: #00d1b2;\n  text-align: right;\n  flex: 1;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div class=\"container\">\n  <div class=\"box\">\n    <div class=\"label\">Espaço C:</div>\n    <div class=\"value\" id=\"htmlgraphics-value\">--</div>\n  </div>\n</div>\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "const htmlgraphicsValue = htmlNode.querySelector('#htmlgraphics-value');\n\nif (htmlgraphicsValue && data.series.length > 0) {\n  const series = data.series[0];\n  const valueField = series.fields.find(f => f.type === 'number');\n\n  if (valueField && valueField.values.length > 0) {\n    const bytes = valueField.values.get(valueField.values.length - 1);\n    const gb = bytes / (1024 ** 3);\n    htmlgraphicsValue.textContent = gb.toFixed(2) + \" GB\";\n  } else {\n    htmlgraphicsValue.textContent = \"Sem dados\";\n  }\n}\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": "CPU"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "FS [(C:)]: Space: Total"
          },
          "itemTag": {
            "filter": "component: storage"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-blues"
          },
          "decimals": 0,
          "displayName": "QUANTIDADE DE CPU",
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 18,
        "y": 9
      },
      "id": 78,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans, sans-serif;\n  box-sizing: border-box;\n}\n\n.wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%; /* Garante que a wrapper ocupe todo o painel */\n  padding: 10px;\n}\n\n.box {\n  display: flex;\n  flex-direction: row;           /* Lado a lado */\n  align-items: center;\n  justify-content: space-between; /* Espaço entre label e valor */\n  border: 2px solid #555;\n  border-radius: 10px;\n  padding: 15px 20px;\n  background-color: #1f1f1f;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n  width: 100%;                  /* Faz com que a .box acompanhe o tamanho do painel */\n  max-width: 100%;              /* Nunca ultrapassa os limites do painel */\n  height: 100%;                 /* Opcional: ocupa toda a altura também */\n}\n\n/* Título (vCPUs) */\n.label {\n  font-size: 1.2em;\n  color: #aaa;\n  text-align: left;\n  flex: 1;\n}\n\n/* Valor (número) */\n.value {\n  font-size: 2.5em;\n  font-weight: bold;\n  color: #00d1b2;\n  text-align: right;\n  flex: 1;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div class=\"container\">\n  <div class=\"box\">\n    <div class=\"label\">Espaço D: Vms</div>\n    <div class=\"value\" id=\"htmlgraphics-value\">--</div>\n  </div>\n</div>\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "const htmlgraphicsValue = htmlNode.querySelector('#htmlgraphics-value');\n\nif (htmlgraphicsValue && data.series.length > 0) {\n  const series = data.series[0];\n  const valueField = series.fields.find(f => f.type === 'number');\n\n  if (valueField && valueField.values.length > 0) {\n    const bytes = valueField.values.get(valueField.values.length - 1);\n    const gb = bytes / (1024 ** 3);\n    htmlgraphicsValue.textContent = gb.toFixed(2) + \" GB\";\n  } else {\n    htmlgraphicsValue.textContent = \"Sem dados\";\n  }\n}\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": "CPU"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "FS [VMs(D:)]: Space: Total"
          },
          "itemTag": {
            "filter": "component: storage"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-yellow",
            "mode": "continuous-GrYlRd"
          },
          "displayName": "UTILIZAÇÃO DE CPU",
          "mappings": [],
          "max": 90,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 0,
        "y": 11
      },
      "id": 8,
      "options": {
        "displayMode": "lcd",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 300,
        "minVizHeight": 16,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {},
        "valueMode": "color"
      },
      "pluginVersion": "12.0.0",
      "targets": [
        {
          "application": {
            "filter": "CPU"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "CPU utilization"
          },
          "itemTag": {
            "filter": "component: cpu"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        }
      ],
      "transparent": true,
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-yellow",
            "mode": "continuous-GrYlRd"
          },
          "displayName": "UTILIZAÇÃO",
          "mappings": [],
          "max": 90,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 5,
        "y": 11
      },
      "id": 80,
      "options": {
        "displayMode": "lcd",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 300,
        "minVizHeight": 16,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {},
        "valueMode": "color"
      },
      "pluginVersion": "12.0.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Used memory"
          },
          "itemTag": {
            "filter": "component: memory"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria Utilizada",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memory utilization"
          },
          "itemTag": {
            "filter": "component: memory"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria Utilizada %",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-yellow",
            "mode": "continuous-GrYlRd"
          },
          "displayName": "UTILIZAÇÃO",
          "mappings": [],
          "max": 90,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 12,
        "y": 11
      },
      "id": 13,
      "options": {
        "displayMode": "lcd",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 300,
        "minVizHeight": 16,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {},
        "valueMode": "color"
      },
      "pluginVersion": "12.0.0",
      "targets": [
        {
          "application": {
            "filter": "Filesystem C:"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "FS [(C:)]: Space: Used"
          },
          "itemTag": {
            "filter": "filesystem: C:"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        },
        {
          "application": {
            "filter": "Filesystem C:"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "FS [(C:)]: Space: Used, in %"
          },
          "itemTag": {
            "filter": "filesystem: C:"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "B",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        }
      ],
      "transparent": true,
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-yellow",
            "mode": "continuous-GrYlRd"
          },
          "displayName": "UTILIZAÇÃO",
          "mappings": [],
          "max": 90,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 18,
        "y": 11
      },
      "id": 79,
      "options": {
        "displayMode": "lcd",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 300,
        "minVizHeight": 16,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {},
        "valueMode": "color"
      },
      "pluginVersion": "12.0.0",
      "targets": [
        {
          "application": {
            "filter": "Filesystem C:"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "FS [VMs(D:)]: Space: Used"
          },
          "itemTag": {
            "filter": "filesystem: D:"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        },
        {
          "application": {
            "filter": "Filesystem C:"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "FS [VMs(D:)]: Space: Used, in %"
          },
          "itemTag": {
            "filter": "filesystem: D:"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "B",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        }
      ],
      "transparent": true,
      "type": "bargauge"
    },
    {
      "gridPos": {
        "h": 2,
        "w": 24,
        "x": 0,
        "y": 13
      },
      "id": 94,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<style>\n  * {\n    font-family: 'Open Sans', sans-serif;\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n\n  .box {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 2px solid #555;\n    border-radius: 10px;\n    padding:  10px;\n    background-color: #1f1f1f;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n    width: 100%;\n  }\n\n  .title {\n    font-size: 1.2em;\n    font-weight: bold;\n    color: #00d1b2;\n    text-align: center;\n    word-break: break-word; /* Quebra o texto se necessário */\n  }\n</style>\n\n<div class=\"box\">\n  <div class=\"title\">VISÃO GERAL VM'S</div>\n</div>\n",
        "mode": "html"
      },
      "pluginVersion": "12.0.0",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 8,
        "x": 0,
        "y": 15
      },
      "id": 82,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: 'Open Sans', sans-serif;\n}\n\n.box {\n    margin-top: 2px;\n    border: solid #555 2px;\n    border-radius: 10px;\n    padding: 0px 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0px;\n    background-color: #ffffff;\n    align-content: center;\n    flex-direction: row;\n    flex-wrap: nowrap;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div style=\"text-align: center;\">\n  <!-- Título correto com a classe para estilo -->\n  <div class=\"box\" id=\"htmlgraphics-text\">\n    <span class=\"title-text\">Total de VM's</span>\n  </div>\n  \n  <!-- Valor + Imagem (serão inseridos via JavaScript) -->\n  <div class=\"box\" id=\"htmlgraphics-value\">\n    <!-- Conteúdo será inserido pelo script -->\n  </div>\n</div>\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "const htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = \"Total de VM's\";\n  htmlgraphicsText.style.color = 'black';\n  htmlgraphicsText.style.fontSize = '16px';\n  htmlgraphicsText.style.fontWeight = 'bold';\n}\n\nconst htmlgraphicsValue = htmlNode.getElementById('htmlgraphics-value');\n\nif (htmlgraphicsValue) {\n  const valueField = data.series[0]?.fields[1];\n\n  if (valueField) {\n    const length = valueField.values.length;\n    const lastValue = valueField.values.get(length - 1);\n\n    // Limpa o conteúdo anterior\n    htmlgraphicsValue.innerHTML = '';\n\n    // Cria uma DIV para a imagem\n    const imgDiv = document.createElement('div');\n    imgDiv.style.width = '180px';\n    imgDiv.style.height = '90px';\n    imgDiv.style.display = 'flex';\n    imgDiv.style.alignContent = 'center';\n    imgDiv.style.justifyContent = 'center';\n    imgDiv.style.alignItems = 'center';\n    \n\n    const img = document.createElement('img');\n    //img.src = 'https://eletroga.com.br/wp-content/uploads/2021/07/img_5d6fe18a0ac98.png';\n    img.src = '/public/img/nilo/servidores/hyper-V.png'; \n    img.alt = 'Hyper-V Logo';\n    img.style.width = '180px';\n    img.style.height = 'auto';\n\n    imgDiv.appendChild(img); // Adiciona a imagem à sua DIV\n\n    // Cria uma DIV para o valor (span)\n    const valueDiv = document.createElement('div');\n    valueDiv.style.width = '180px';\n    valueDiv.style.height = '90px';\n    valueDiv.style.textAlign = 'center'; // Centraliza o valor\n\n    const valueText = document.createElement('span');\n    valueText.textContent = lastValue;\n    valueText.style.fontSize = '57.5px';\n    valueText.style.fontWeight = 'bold';\n    valueText.style.color = 'black';\n\n    valueDiv.appendChild(valueText); // Adiciona o valor à sua DIV\n\n    // Adiciona ambas as DIVs ao container principal\n    htmlgraphicsValue.appendChild(imgDiv);\n    htmlgraphicsValue.appendChild(valueDiv);\n  } else {\n    htmlgraphicsValue.textContent = \"No data\";\n  }\n}",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": "/1.1- Informacoes de quantidade de vms/"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Hyper-V: Total de Servidores"
          },
          "itemTag": {
            "filter": "contagem: hyperv"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        }
      ],
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 8,
        "x": 8,
        "y": 15
      },
      "id": 83,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: 'Open Sans', sans-serif;\n}\n\n.box {\n    margin-top: 2px;\n    border: solid #555 2px;\n    border-radius: 10px;\n    padding: 0px 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0px;\n    background-color: #ffffff;\n    align-content: center;\n    flex-direction: row;\n    flex-wrap: nowrap;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div style=\"text-align: center;\">\n  <!-- Título correto com a classe para estilo -->\n  <div class=\"box\" id=\"htmlgraphics-text\">\n    <span class=\"title-text\">Total de VM's</span>\n  </div>\n  \n  <!-- Valor + Imagem (serão inseridos via JavaScript) -->\n  <div class=\"box\" id=\"htmlgraphics-value\">\n    <!-- Conteúdo será inserido pelo script -->\n  </div>\n</div>\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "const htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = \"VM's On-line\";\n  htmlgraphicsText.style.color = 'green';       // Cor preta (muda para a cor que quiser)\n  htmlgraphicsText.style.fontSize = '16px';     // Tamanho da fonte (mude o valor conforme quiser)\n  htmlgraphicsText.style.fontWeight = 'bold';   // Peso da fonte (opcional)\n}\n\nconst htmlgraphicsValue = htmlNode.getElementById('htmlgraphics-value');\n\nif (htmlgraphicsValue) {\n  const valueField = data.series[0]?.fields[1];\n\n  if (valueField) {\n    const length = valueField.values.length;\n    const lastValue = valueField.values.get(length - 1);\n\n    // Limpa o conteúdo anterior\n    htmlgraphicsValue.innerHTML = '';\n\n    // Cria uma DIV para a imagem\n    const imgDiv = document.createElement('div');\n    imgDiv.style.width = '180px';\n    imgDiv.style.height = '90px';\n    imgDiv.style.display = 'flex';\n    imgDiv.style.alignContent = 'center';\n    imgDiv.style.justifyContent = 'center';\n    imgDiv.style.alignItems = 'center';\n    \n\n    const img = document.createElement('img');\n    //img.src = 'https://eletroga.com.br/wp-content/uploads/2021/07/img_5d6fe18a0ac98.png';\n    img.src = '/public/img/nilo/servidores/hyper-V.png'; \n    img.alt = 'Hyper-V Logo';\n    img.style.width = '180px';\n    img.style.height = 'auto';\n\n    imgDiv.appendChild(img); // Adiciona a imagem à sua DIV\n\n    // Cria uma DIV para o valor (span)\n    const valueDiv = document.createElement('div');\n    valueDiv.style.width = '180px';\n    valueDiv.style.height = '90px';\n    valueDiv.style.textAlign = 'center'; // Centraliza o valor\n\n    const valueText = document.createElement('span');\n    valueText.textContent = lastValue;\n    valueText.style.fontSize = '57.5px';\n    valueText.style.fontWeight = 'bold';\n    valueText.style.color = 'Green';\n\n    valueDiv.appendChild(valueText); // Adiciona o valor à sua DIV\n\n    // Adiciona ambas as DIVs ao container principal\n    htmlgraphicsValue.appendChild(imgDiv);\n    htmlgraphicsValue.appendChild(valueDiv);\n  } else {\n    htmlgraphicsValue.textContent = \"No data\";\n  }\n}",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": "/1.1- Informacoes de quantidade de vms/"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Hyper-V: Servidores Ligados_on"
          },
          "itemTag": {
            "filter": "contagem: hyperv"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        }
      ],
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 8,
        "x": 16,
        "y": 15
      },
      "id": 84,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: 'Open Sans', sans-serif;\n}\n\n.box {\n    margin-top: 2px;\n    border: solid #555 2px;\n    border-radius: 10px;\n    padding: 0px 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0px;\n    background-color: #ffffff;\n    align-content: center;\n    flex-direction: row;\n    flex-wrap: nowrap;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div style=\"text-align: center;\">\n  <!-- Título correto com a classe para estilo -->\n  <div class=\"box\" id=\"htmlgraphics-text\">\n    <span class=\"title-text\">Total de VM's</span>\n  </div>\n  \n  <!-- Valor + Imagem (serão inseridos via JavaScript) -->\n  <div class=\"box\" id=\"htmlgraphics-value\">\n    <!-- Conteúdo será inserido pelo script -->\n  </div>\n</div>\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "const htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = \"VM's Off-line\";\n  htmlgraphicsText.style.color = 'Red';       // Cor preta (muda para a cor que quiser)\n  htmlgraphicsText.style.fontSize = '16px';     // Tamanho da fonte (mude o valor conforme quiser)\n  htmlgraphicsText.style.fontWeight = 'bold';   // Peso da fonte (opcional)\n}\n\nconst htmlgraphicsValue = htmlNode.getElementById('htmlgraphics-value');\n\nif (htmlgraphicsValue) {\n  const valueField = data.series[0]?.fields[1];\n\n  if (valueField) {\n    const length = valueField.values.length;\n    const lastValue = valueField.values.get(length - 1);\n\n    // Limpa o conteúdo anterior\n    htmlgraphicsValue.innerHTML = '';\n\n    // Cria uma DIV para a imagem\n    const imgDiv = document.createElement('div');\n    imgDiv.style.width = '180px';\n    imgDiv.style.height = '90px';\n    imgDiv.style.display = 'flex';\n    imgDiv.style.alignContent = 'center';\n    imgDiv.style.justifyContent = 'center';\n    imgDiv.style.alignItems = 'center';\n    \n\n    const img = document.createElement('img');\n    //img.src = 'https://eletroga.com.br/wp-content/uploads/2021/07/img_5d6fe18a0ac98.png';\n    img.src = '/public/img/nilo/servidores/hyper-V.png'; \n    img.alt = 'Hyper-V Logo';\n    img.style.width = '180px';\n    img.style.height = 'auto';\n\n    imgDiv.appendChild(img); // Adiciona a imagem à sua DIV\n\n    // Cria uma DIV para o valor (span)\n    const valueDiv = document.createElement('div');\n    valueDiv.style.width = '180px';\n    valueDiv.style.height = '90px';\n    valueDiv.style.textAlign = 'center'; // Centraliza o valor\n\n    const valueText = document.createElement('span');\n    valueText.textContent = lastValue;\n    valueText.style.fontSize = '57.5px';\n    valueText.style.fontWeight = 'bold';\n    valueText.style.color = 'Red';\n\n    valueDiv.appendChild(valueText); // Adiciona o valor à sua DIV\n\n    // Adiciona ambas as DIVs ao container principal\n    htmlgraphicsValue.appendChild(imgDiv);\n    htmlgraphicsValue.appendChild(valueDiv);\n  } else {\n    htmlgraphicsValue.textContent = \"No data\";\n  }\n}",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": "/1.1- Informacoes de quantidade de vms/"
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Hyper-V: Servidores Desligados_off"
          },
          "itemTag": {
            "filter": "contagem: hyperv"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": true,
            "disableDataAlignment": false,
            "minSeverity": 3,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "triggers": {
            "acknowledged": 2
          }
        }
      ],
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "description": "Descrição da maquina virtual 23022RECDF",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 15,
        "w": 3,
        "x": 0,
        "y": 19
      },
      "id": 63,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "(() => {\n  const getLastValue = (fieldName) => {\n    const series = data.series.find(s => s.name.includes(fieldName));\n    if (!series) return null;\n    const field = series.fields[1] || series.fields[0];\n    if (!field || !field.values) return null;\n    return field.values.get(field.values.length - 1);\n  };\n\n  const formatBytesToGB = (bytes) => {\n    if (bytes === null || bytes === undefined || isNaN(bytes)) return '--';\n    return (bytes / (1024 ** 3)).toFixed(2);\n  };\n\n  const formatPercent = (used, total) => {\n    if (used == null || total == null || isNaN(used) || isNaN(total) || total === 0) return '--';\n    return ((used / total) * 100).toFixed(1);\n  };\n\n  const parseUptimeText = (text) => {\n    if (!text || typeof text !== 'string') return '--';\n    const diasMatch = text.match(/(\\d+)\\s*dias?/i);\n    const horasMatch = text.match(/(\\d+)\\s*horas?/i);\n    const minutosMatch = text.match(/(\\d+)\\s*minutos?/i);\n    const dias = diasMatch ? parseInt(diasMatch[1], 10) : 0;\n    const horas = horasMatch ? parseInt(horasMatch[1], 10) : 0;\n    const minutos = minutosMatch ? parseInt(minutosMatch[1], 10) : 0;\n    return { formatted: `${dias}d ${horas}h ${minutos}m`, dias };\n  };\n\n  const extractVMName = () => {\n    const serie = data.series.find(s => s.name.includes(' - '));\n    if (!serie) return '';\n    const parts = serie.name.split(' - ');\n    return parts.length > 1 ? parts[1].trim() : '';\n  };\n\n  const getUptimeAlert = (dias) => {\n    if (dias > 30) {\n      return { color: '#d32f2f', text: '⚠️ Uptime muito alto!' };\n    } else if (dias > 20) {\n      return { color: '#fbc02d', text: '⚠️ Uptime alto!' };\n    } else if (dias > 11) {\n      return { color: '#1976d2', text: '⏳ Uptime médio' };\n    }\n    return { color: '#4caf50', text: '✔️ Uptime normal' };\n  };\n\n  const vmName = extractVMName();\n  const uptimeRaw = getLastValue('Uptime da VM');\n  const { formatted: uptime, dias: uptimeDias } = parseUptimeText(uptimeRaw);\n  const uptimeAlert = getUptimeAlert(uptimeDias);\n\n  const discoTotalBytes = getLastValue('Disco total');\n  const discoUtilizadoBytes = getLastValue('Disco utilizado');\n  const discoTotalGB = formatBytesToGB(discoTotalBytes);\n  const discoUtilizadoGB = formatBytesToGB(discoUtilizadoBytes);\n  const discoPercent = formatPercent(discoUtilizadoBytes, discoTotalBytes);\n\n  const memoriaAtribuidaGB = getLastValue('Memória atribuída');\n  const memoriaUtilizadaGB = getLastValue('Memória utilizada');\n  const memoriaTotal = memoriaAtribuidaGB !== null ? memoriaAtribuidaGB.toFixed(2) : '--';\n  const memoriaUsada = memoriaUtilizadaGB !== null ? memoriaUtilizadaGB.toFixed(2) : '--';\n  const memoriaPercent = formatPercent(memoriaUtilizadaGB, memoriaAtribuidaGB);\n\n  const statusValue = Number(getLastValue('Status da VM'));\n  const getStatusInfo = (status) => {\n    switch (status) {\n      case 0: return { text: 'Desligada', color: '#f44336', icon: '🔴' };\n      case 1: return { text: 'Ligada', color: '#4caf50', icon: '🟢' };\n      case 2: return { text: 'Pausada', color: '#ffeb3b', icon: '🟡' };\n      case 3: return { text: 'Salvando', color: '#2196f3', icon: '💾' };\n      default: return { text: 'Desconhecida', color: '#9e9e9e', icon: '❓' };\n    }\n  };\n  const status = getStatusInfo(statusValue);\n  const osImage = '/public/img/nilo/servidores/windows-10.png'; // Imagem do sistema operacional\n\n  htmlNode.innerHTML = `\n    <style>\n      .vm-card-container {\n        background-color: #111;\n        color: #eaeaea;\n        padding: 5px 5px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0,0,0,0.5);\n        font-family: 'Segoe UI', sans-serif;\n        font-size: 14px;\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      .vm-header {\n        display: flex;\n        align-items: center;\n        margin-bottom: 16px;\n      }\n\n      .vm-os-image {\n        width: 48px;\n        height: 48px;\n        flex-shrink: 0;\n      }\n\n      .vm-name {\n        font-size: 20px;\n        font-weight: bold;\n        margin-left: 12px;\n        color: #ffffff;\n        flex-grow: 1;\n        white-space: nowrap;\n      }\n\n      .vm-card {\n        background: #1e1e1e;\n        padding: 12px 16px;\n        border-radius: 6px;\n        margin: 8px 0;\n      }\n\n      .status-icon {\n        display: inline-block;\n        font-size: 1.3em;\n        color: ${status.color};\n        animation: pulseGlow 1.5s ease-in-out infinite;\n      }\n\n      @keyframes pulseGlow {\n        0% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n        50% {\n          transform: scale(1.2);\n          text-shadow: 0 0 8px ${status.color};\n        }\n        100% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n      }\n\n      .progress-bar {\n        width: 100%;\n        height: 6px;\n        background: #333;\n        border-radius: 4px;\n        margin-top: 8px;\n      }\n\n      .progress-bar-fill {\n        height: 100%;\n      }\n\n      .highlight {\n        color: #ffeb3b;\n        font-weight: bold;\n      }\n\n      .footer-text {\n        text-align: center;\n        font-size: 12px;\n        margin-top: 16px;\n        color: #9e9e9e;\n      }\n    </style>\n\n    <div class=\"vm-card-container\">\n      <!-- Cabeçalho com imagem e nome da VM -->\n      <div class=\"vm-header\">\n        <img src=\"${osImage}\" alt=\"OS\" class=\"vm-os-image\" />\n        <div class=\"vm-name\">${vmName}</div>\n      </div>\n\n      <!-- Status -->\n      <div class=\"vm-card\">\n        <strong>Status:</strong> <span class=\"status-icon\">${status.icon}</span> ${status.text}\n      </div>\n\n      <!-- Uptime -->\n      <div class=\"vm-card\" style=\"color: ${uptimeAlert.color};\">\n        <strong>Uptime:</strong> ${uptime} <small>${uptimeAlert.text}</small>\n      </div>\n\n      <!-- Disco -->\n      <div class=\"vm-card\">\n        <strong>Disco:</strong> ${discoTotalGB} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Disco Usado:</strong> ${discoUtilizadoGB} GB (${discoPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${discoPercent}%; background: #ff9800;\"></div>\n        </div>\n      </div>\n\n      <!-- Memória -->\n      <div class=\"vm-card\">\n        <strong>Memória Total:</strong> ${memoriaTotal} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Memória Usada:</strong> ${memoriaUsada} GB (${memoriaPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${memoriaPercent}%; background: #4caf50;\"></div>\n        </div>\n      </div>\n\n      <div class=\"footer-text\">\n        <small>Monitoramento em tempo real</small>\n      </div>\n    </div>\n  `;\n})();\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco total - 23022RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco total",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco utilizado - 23022RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco utilizado",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória atribuída (GB) - 23022RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria atribuida",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória utilizada (GB) - 23022RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria utilizada",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Uptime da VM 23022RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: uptime"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Uptime",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Status da VM - 23022RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: Status"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Status",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "description": "Descrição da maquina virtual 23022RECDF",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 15,
        "w": 3,
        "x": 3,
        "y": 19
      },
      "id": 64,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "(() => {\n  const getLastValue = (fieldName) => {\n    const series = data.series.find(s => s.name.includes(fieldName));\n    if (!series) return null;\n    const field = series.fields[1] || series.fields[0];\n    if (!field || !field.values) return null;\n    return field.values.get(field.values.length - 1);\n  };\n\n  const formatBytesToGB = (bytes) => {\n    if (bytes === null || bytes === undefined || isNaN(bytes)) return '--';\n    return (bytes / (1024 ** 3)).toFixed(2);\n  };\n\n  const formatPercent = (used, total) => {\n    if (used == null || total == null || isNaN(used) || isNaN(total) || total === 0) return '--';\n    return ((used / total) * 100).toFixed(1);\n  };\n\n  const parseUptimeText = (text) => {\n    if (!text || typeof text !== 'string') return '--';\n    const diasMatch = text.match(/(\\d+)\\s*dias?/i);\n    const horasMatch = text.match(/(\\d+)\\s*horas?/i);\n    const minutosMatch = text.match(/(\\d+)\\s*minutos?/i);\n    const dias = diasMatch ? parseInt(diasMatch[1], 10) : 0;\n    const horas = horasMatch ? parseInt(horasMatch[1], 10) : 0;\n    const minutos = minutosMatch ? parseInt(minutosMatch[1], 10) : 0;\n    return { formatted: `${dias}d ${horas}h ${minutos}m`, dias };\n  };\n\n  const extractVMName = () => {\n    const serie = data.series.find(s => s.name.includes(' - '));\n    if (!serie) return '';\n    const parts = serie.name.split(' - ');\n    return parts.length > 1 ? parts[1].trim() : '';\n  };\n\n  const getUptimeAlert = (dias) => {\n    if (dias > 30) {\n      return { color: '#d32f2f', text: '⚠️ Uptime muito alto!' };\n    } else if (dias > 20) {\n      return { color: '#fbc02d', text: '⚠️ Uptime alto!' };\n    } else if (dias > 11) {\n      return { color: '#1976d2', text: '⏳ Uptime médio' };\n    }\n    return { color: '#4caf50', text: '✔️ Uptime normal' };\n  };\n\n  const vmName = extractVMName();\n  const uptimeRaw = getLastValue('Uptime da VM');\n  const { formatted: uptime, dias: uptimeDias } = parseUptimeText(uptimeRaw);\n  const uptimeAlert = getUptimeAlert(uptimeDias);\n\n  const discoTotalBytes = getLastValue('Disco total');\n  const discoUtilizadoBytes = getLastValue('Disco utilizado');\n  const discoTotalGB = formatBytesToGB(discoTotalBytes);\n  const discoUtilizadoGB = formatBytesToGB(discoUtilizadoBytes);\n  const discoPercent = formatPercent(discoUtilizadoBytes, discoTotalBytes);\n\n  const memoriaAtribuidaGB = getLastValue('Memória atribuída');\n  const memoriaUtilizadaGB = getLastValue('Memória utilizada');\n  const memoriaTotal = memoriaAtribuidaGB !== null ? memoriaAtribuidaGB.toFixed(2) : '--';\n  const memoriaUsada = memoriaUtilizadaGB !== null ? memoriaUtilizadaGB.toFixed(2) : '--';\n  const memoriaPercent = formatPercent(memoriaUtilizadaGB, memoriaAtribuidaGB);\n\n  const statusValue = Number(getLastValue('Status da VM'));\n  const getStatusInfo = (status) => {\n    switch (status) {\n      case 0: return { text: 'Desligada', color: '#f44336', icon: '🔴' };\n      case 1: return { text: 'Ligada', color: '#4caf50', icon: '🟢' };\n      case 2: return { text: 'Pausada', color: '#ffeb3b', icon: '🟡' };\n      case 3: return { text: 'Salvando', color: '#2196f3', icon: '💾' };\n      default: return { text: 'Desconhecida', color: '#9e9e9e', icon: '❓' };\n    }\n  };\n  const status = getStatusInfo(statusValue);\n  const osImage = '/public/img/nilo/servidores/windows-10.png'; // Imagem do sistema operacional\n\n  htmlNode.innerHTML = `\n    <style>\n      .vm-card-container {\n        background-color: #111;\n        color: #eaeaea;\n        padding: 5px 5px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0,0,0,0.5);\n        font-family: 'Segoe UI', sans-serif;\n        font-size: 14px;\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      .vm-header {\n        display: flex;\n        align-items: center;\n        margin-bottom: 16px;\n      }\n\n      .vm-os-image {\n        width: 48px;\n        height: 48px;\n        flex-shrink: 0;\n      }\n\n      .vm-name {\n        font-size: 20px;\n        font-weight: bold;\n        margin-left: 12px;\n        color: #ffffff;\n        flex-grow: 1;\n        white-space: nowrap;\n      }\n\n      .vm-card {\n        background: #1e1e1e;\n        padding: 12px 16px;\n        border-radius: 6px;\n        margin: 8px 0;\n      }\n\n      .status-icon {\n        display: inline-block;\n        font-size: 1.3em;\n        color: ${status.color};\n        animation: pulseGlow 1.5s ease-in-out infinite;\n      }\n\n      @keyframes pulseGlow {\n        0% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n        50% {\n          transform: scale(1.2);\n          text-shadow: 0 0 8px ${status.color};\n        }\n        100% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n      }\n\n      .progress-bar {\n        width: 100%;\n        height: 6px;\n        background: #333;\n        border-radius: 4px;\n        margin-top: 8px;\n      }\n\n      .progress-bar-fill {\n        height: 100%;\n      }\n\n      .highlight {\n        color: #ffeb3b;\n        font-weight: bold;\n      }\n\n      .footer-text {\n        text-align: center;\n        font-size: 12px;\n        margin-top: 16px;\n        color: #9e9e9e;\n      }\n    </style>\n\n    <div class=\"vm-card-container\">\n      <!-- Cabeçalho com imagem e nome da VM -->\n      <div class=\"vm-header\">\n        <img src=\"${osImage}\" alt=\"OS\" class=\"vm-os-image\" />\n        <div class=\"vm-name\">${vmName}</div>\n      </div>\n\n      <!-- Status -->\n      <div class=\"vm-card\">\n        <strong>Status:</strong> <span class=\"status-icon\">${status.icon}</span> ${status.text}\n      </div>\n\n      <!-- Uptime -->\n      <div class=\"vm-card\" style=\"color: ${uptimeAlert.color};\">\n        <strong>Uptime:</strong> ${uptime} <small>${uptimeAlert.text}</small>\n      </div>\n\n      <!-- Disco -->\n      <div class=\"vm-card\">\n        <strong>Disco:</strong> ${discoTotalGB} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Disco Usado:</strong> ${discoUtilizadoGB} GB (${discoPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${discoPercent}%; background: #ff9800;\"></div>\n        </div>\n      </div>\n\n      <!-- Memória -->\n      <div class=\"vm-card\">\n        <strong>Memória Total:</strong> ${memoriaTotal} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Memória Usada:</strong> ${memoriaUsada} GB (${memoriaPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${memoriaPercent}%; background: #4caf50;\"></div>\n        </div>\n      </div>\n\n      <div class=\"footer-text\">\n        <small>Monitoramento em tempo real</small>\n      </div>\n    </div>\n  `;\n})();\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco total - 23111RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco total",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco utilizado - 23111RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco utilizado",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória atribuída (GB) - 23111RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria atribuida",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória utilizada (GB) - 23111RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria utilizada",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Uptime da VM 23111RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: uptime"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Uptime",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Status da VM - 23111RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: Status"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Status",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "description": "Descrição da maquina virtual 23022RECDF",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 15,
        "w": 3,
        "x": 6,
        "y": 19
      },
      "id": 68,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "(() => {\n  const getLastValue = (fieldName) => {\n    const series = data.series.find(s => s.name.includes(fieldName));\n    if (!series) return null;\n    const field = series.fields[1] || series.fields[0];\n    if (!field || !field.values) return null;\n    return field.values.get(field.values.length - 1);\n  };\n\n  const formatBytesToGB = (bytes) => {\n    if (bytes === null || bytes === undefined || isNaN(bytes)) return '--';\n    return (bytes / (1024 ** 3)).toFixed(2);\n  };\n\n  const formatPercent = (used, total) => {\n    if (used == null || total == null || isNaN(used) || isNaN(total) || total === 0) return '--';\n    return ((used / total) * 100).toFixed(1);\n  };\n\n  const parseUptimeText = (text) => {\n    if (!text || typeof text !== 'string') return '--';\n    const diasMatch = text.match(/(\\d+)\\s*dias?/i);\n    const horasMatch = text.match(/(\\d+)\\s*horas?/i);\n    const minutosMatch = text.match(/(\\d+)\\s*minutos?/i);\n    const dias = diasMatch ? parseInt(diasMatch[1], 10) : 0;\n    const horas = horasMatch ? parseInt(horasMatch[1], 10) : 0;\n    const minutos = minutosMatch ? parseInt(minutosMatch[1], 10) : 0;\n    return { formatted: `${dias}d ${horas}h ${minutos}m`, dias };\n  };\n\n  const extractVMName = () => {\n    const serie = data.series.find(s => s.name.includes(' - '));\n    if (!serie) return '';\n    const parts = serie.name.split(' - ');\n    return parts.length > 1 ? parts[1].trim() : '';\n  };\n\n  const getUptimeAlert = (dias) => {\n    if (dias > 30) {\n      return { color: '#d32f2f', text: '⚠️ Uptime muito alto!' };\n    } else if (dias > 20) {\n      return { color: '#fbc02d', text: '⚠️ Uptime alto!' };\n    } else if (dias > 11) {\n      return { color: '#1976d2', text: '⏳ Uptime médio' };\n    }\n    return { color: '#4caf50', text: '✔️ Uptime normal' };\n  };\n\n  const vmName = extractVMName();\n  const uptimeRaw = getLastValue('Uptime da VM');\n  const { formatted: uptime, dias: uptimeDias } = parseUptimeText(uptimeRaw);\n  const uptimeAlert = getUptimeAlert(uptimeDias);\n\n  const discoTotalBytes = getLastValue('Disco total');\n  const discoUtilizadoBytes = getLastValue('Disco utilizado');\n  const discoTotalGB = formatBytesToGB(discoTotalBytes);\n  const discoUtilizadoGB = formatBytesToGB(discoUtilizadoBytes);\n  const discoPercent = formatPercent(discoUtilizadoBytes, discoTotalBytes);\n\n  const memoriaAtribuidaGB = getLastValue('Memória atribuída');\n  const memoriaUtilizadaGB = getLastValue('Memória utilizada');\n  const memoriaTotal = memoriaAtribuidaGB !== null ? memoriaAtribuidaGB.toFixed(2) : '--';\n  const memoriaUsada = memoriaUtilizadaGB !== null ? memoriaUtilizadaGB.toFixed(2) : '--';\n  const memoriaPercent = formatPercent(memoriaUtilizadaGB, memoriaAtribuidaGB);\n\n  const statusValue = Number(getLastValue('Status da VM'));\n  const getStatusInfo = (status) => {\n    switch (status) {\n      case 0: return { text: 'Desligada', color: '#f44336', icon: '🔴' };\n      case 1: return { text: 'Ligada', color: '#4caf50', icon: '🟢' };\n      case 2: return { text: 'Pausada', color: '#ffeb3b', icon: '🟡' };\n      case 3: return { text: 'Salvando', color: '#2196f3', icon: '💾' };\n      default: return { text: 'Desconhecida', color: '#9e9e9e', icon: '❓' };\n    }\n  };\n  const status = getStatusInfo(statusValue);\n  const osImage = '/public/img/nilo/servidores/windows-10.png'; // Imagem do sistema operacional\n\n  htmlNode.innerHTML = `\n    <style>\n      .vm-card-container {\n        background-color: #111;\n        color: #eaeaea;\n        padding: 5px 5px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0,0,0,0.5);\n        font-family: 'Segoe UI', sans-serif;\n        font-size: 14px;\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      .vm-header {\n        display: flex;\n        align-items: center;\n        margin-bottom: 16px;\n      }\n\n      .vm-os-image {\n        width: 48px;\n        height: 48px;\n        flex-shrink: 0;\n      }\n\n      .vm-name {\n        font-size: 20px;\n        font-weight: bold;\n        margin-left: 12px;\n        color: #ffffff;\n        flex-grow: 1;\n        white-space: nowrap;\n      }\n\n      .vm-card {\n        background: #1e1e1e;\n        padding: 12px 16px;\n        border-radius: 6px;\n        margin: 8px 0;\n      }\n\n      .status-icon {\n        display: inline-block;\n        font-size: 1.3em;\n        color: ${status.color};\n        animation: pulseGlow 1.5s ease-in-out infinite;\n      }\n\n      @keyframes pulseGlow {\n        0% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n        50% {\n          transform: scale(1.2);\n          text-shadow: 0 0 8px ${status.color};\n        }\n        100% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n      }\n\n      .progress-bar {\n        width: 100%;\n        height: 6px;\n        background: #333;\n        border-radius: 4px;\n        margin-top: 8px;\n      }\n\n      .progress-bar-fill {\n        height: 100%;\n      }\n\n      .highlight {\n        color: #ffeb3b;\n        font-weight: bold;\n      }\n\n      .footer-text {\n        text-align: center;\n        font-size: 12px;\n        margin-top: 16px;\n        color: #9e9e9e;\n      }\n    </style>\n\n    <div class=\"vm-card-container\">\n      <!-- Cabeçalho com imagem e nome da VM -->\n      <div class=\"vm-header\">\n        <img src=\"${osImage}\" alt=\"OS\" class=\"vm-os-image\" />\n        <div class=\"vm-name\">${vmName}</div>\n      </div>\n\n      <!-- Status -->\n      <div class=\"vm-card\">\n        <strong>Status:</strong> <span class=\"status-icon\">${status.icon}</span> ${status.text}\n      </div>\n\n      <!-- Uptime -->\n      <div class=\"vm-card\" style=\"color: ${uptimeAlert.color};\">\n        <strong>Uptime:</strong> ${uptime} <small>${uptimeAlert.text}</small>\n      </div>\n\n      <!-- Disco -->\n      <div class=\"vm-card\">\n        <strong>Disco:</strong> ${discoTotalGB} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Disco Usado:</strong> ${discoUtilizadoGB} GB (${discoPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${discoPercent}%; background: #ff9800;\"></div>\n        </div>\n      </div>\n\n      <!-- Memória -->\n      <div class=\"vm-card\">\n        <strong>Memória Total:</strong> ${memoriaTotal} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Memória Usada:</strong> ${memoriaUsada} GB (${memoriaPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${memoriaPercent}%; background: #4caf50;\"></div>\n        </div>\n      </div>\n\n      <div class=\"footer-text\">\n        <small>Monitoramento em tempo real</small>\n      </div>\n    </div>\n  `;\n})();\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco total - SATURNO"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco total",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco utilizado - SATURNO"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco utilizado",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória atribuída (GB) - SATURNO"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria atribuida",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória utilizada (GB) - SATURNO"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria utilizada",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Uptime da VM SATURNO"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: uptime"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Uptime",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Status da VM - SATURNO"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: Status"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Status",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "description": "Descrição da maquina virtual 23022RECDF",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 15,
        "w": 3,
        "x": 9,
        "y": 19
      },
      "id": 62,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "(() => {\n  const getLastValue = (fieldName) => {\n    const series = data.series.find(s => s.name.includes(fieldName));\n    if (!series) return null;\n    const field = series.fields[1] || series.fields[0];\n    if (!field || !field.values) return null;\n    return field.values.get(field.values.length - 1);\n  };\n\n  const formatBytesToGB = (bytes) => {\n    if (bytes === null || bytes === undefined || isNaN(bytes)) return '--';\n    return (bytes / (1024 ** 3)).toFixed(2);\n  };\n\n  const formatPercent = (used, total) => {\n    if (used == null || total == null || isNaN(used) || isNaN(total) || total === 0) return '--';\n    return ((used / total) * 100).toFixed(1);\n  };\n\n  const parseUptimeText = (text) => {\n    if (!text || typeof text !== 'string') return '--';\n    const diasMatch = text.match(/(\\d+)\\s*dias?/i);\n    const horasMatch = text.match(/(\\d+)\\s*horas?/i);\n    const minutosMatch = text.match(/(\\d+)\\s*minutos?/i);\n    const dias = diasMatch ? parseInt(diasMatch[1], 10) : 0;\n    const horas = horasMatch ? parseInt(horasMatch[1], 10) : 0;\n    const minutos = minutosMatch ? parseInt(minutosMatch[1], 10) : 0;\n    return { formatted: `${dias}d ${horas}h ${minutos}m`, dias };\n  };\n\n  const extractVMName = () => {\n    const serie = data.series.find(s => s.name.includes(' - '));\n    if (!serie) return '';\n    const parts = serie.name.split(' - ');\n    return parts.length > 1 ? parts[1].trim() : '';\n  };\n\n  const getUptimeAlert = (dias) => {\n    if (dias > 30) {\n      return { color: '#d32f2f', text: '⚠️ Uptime muito alto!' };\n    } else if (dias > 20) {\n      return { color: '#fbc02d', text: '⚠️ Uptime alto!' };\n    } else if (dias > 11) {\n      return { color: '#1976d2', text: '⏳ Uptime médio' };\n    }\n    return { color: '#4caf50', text: '✔️ Uptime normal' };\n  };\n\n  const vmName = extractVMName();\n  const uptimeRaw = getLastValue('Uptime da VM');\n  const { formatted: uptime, dias: uptimeDias } = parseUptimeText(uptimeRaw);\n  const uptimeAlert = getUptimeAlert(uptimeDias);\n\n  const discoTotalBytes = getLastValue('Disco total');\n  const discoUtilizadoBytes = getLastValue('Disco utilizado');\n  const discoTotalGB = formatBytesToGB(discoTotalBytes);\n  const discoUtilizadoGB = formatBytesToGB(discoUtilizadoBytes);\n  const discoPercent = formatPercent(discoUtilizadoBytes, discoTotalBytes);\n\n  const memoriaAtribuidaGB = getLastValue('Memória atribuída');\n  const memoriaUtilizadaGB = getLastValue('Memória utilizada');\n  const memoriaTotal = memoriaAtribuidaGB !== null ? memoriaAtribuidaGB.toFixed(2) : '--';\n  const memoriaUsada = memoriaUtilizadaGB !== null ? memoriaUtilizadaGB.toFixed(2) : '--';\n  const memoriaPercent = formatPercent(memoriaUtilizadaGB, memoriaAtribuidaGB);\n\n  const statusValue = Number(getLastValue('Status da VM'));\n  const getStatusInfo = (status) => {\n    switch (status) {\n      case 0: return { text: 'Desligada', color: '#f44336', icon: '🔴' };\n      case 1: return { text: 'Ligada', color: '#4caf50', icon: '🟢' };\n      case 2: return { text: 'Pausada', color: '#ffeb3b', icon: '🟡' };\n      case 3: return { text: 'Salvando', color: '#2196f3', icon: '💾' };\n      default: return { text: 'Desconhecida', color: '#9e9e9e', icon: '❓' };\n    }\n  };\n  const status = getStatusInfo(statusValue);\n  const osImage = '/public/img/nilo/servidores/Linux.png'; // Imagem do sistema operacional\n\n  htmlNode.innerHTML = `\n    <style>\n      .vm-card-container {\n        background-color: #111;\n        color: #eaeaea;\n        padding: 5px 5px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0,0,0,0.5);\n        font-family: 'Segoe UI', sans-serif;\n        font-size: 14px;\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      .vm-header {\n        display: flex;\n        align-items: center;\n        margin-bottom: 16px;\n      }\n\n      .vm-os-image {\n        width: 48px;\n        height: 48px;\n        flex-shrink: 0;\n      }\n\n      .vm-name {\n        font-size: 20px;\n        font-weight: bold;\n        margin-left: 12px;\n        color: #ffffff;\n        flex-grow: 1;\n        white-space: nowrap;\n      }\n\n      .vm-card {\n        background: #1e1e1e;\n        padding: 12px 16px;\n        border-radius: 6px;\n        margin: 8px 0;\n      }\n\n      .status-icon {\n        display: inline-block;\n        font-size: 1.3em;\n        color: ${status.color};\n        animation: pulseGlow 1.5s ease-in-out infinite;\n      }\n\n      @keyframes pulseGlow {\n        0% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n        50% {\n          transform: scale(1.2);\n          text-shadow: 0 0 8px ${status.color};\n        }\n        100% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n      }\n\n      .progress-bar {\n        width: 100%;\n        height: 6px;\n        background: #333;\n        border-radius: 4px;\n        margin-top: 8px;\n      }\n\n      .progress-bar-fill {\n        height: 100%;\n      }\n\n      .highlight {\n        color: #ffeb3b;\n        font-weight: bold;\n      }\n\n      .footer-text {\n        text-align: center;\n        font-size: 12px;\n        margin-top: 16px;\n        color: #9e9e9e;\n      }\n    </style>\n\n    <div class=\"vm-card-container\">\n      <!-- Cabeçalho com imagem e nome da VM -->\n      <div class=\"vm-header\">\n        <img src=\"${osImage}\" alt=\"OS\" class=\"vm-os-image\" />\n        <div class=\"vm-name\">${vmName}</div>\n      </div>\n\n      <!-- Status -->\n      <div class=\"vm-card\">\n        <strong>Status:</strong> <span class=\"status-icon\">${status.icon}</span> ${status.text}\n      </div>\n\n      <!-- Uptime -->\n      <div class=\"vm-card\" style=\"color: ${uptimeAlert.color};\">\n        <strong>Uptime:</strong> ${uptime} <small>${uptimeAlert.text}</small>\n      </div>\n\n      <!-- Disco -->\n      <div class=\"vm-card\">\n        <strong>Disco:</strong> ${discoTotalGB} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Disco Usado:</strong> ${discoUtilizadoGB} GB (${discoPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${discoPercent}%; background: #ff9800;\"></div>\n        </div>\n      </div>\n\n      <!-- Memória -->\n      <div class=\"vm-card\">\n        <strong>Memória Total:</strong> ${memoriaTotal} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Memória Usada:</strong> ${memoriaUsada} GB (${memoriaPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${memoriaPercent}%; background: #4caf50;\"></div>\n        </div>\n      </div>\n\n      <div class=\"footer-text\">\n        <small>Monitoramento em tempo real</small>\n      </div>\n    </div>\n  `;\n})();\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco total - RMM"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco total",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco utilizado - RMM"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco utilizado",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória atribuída (GB) - RMM"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria atribuida",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória utilizada (GB) - RMM"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria utilizada",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Uptime da VM RMM"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: uptime"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Uptime",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Status da VM - RMM"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: Status"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Status",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "description": "Descrição da maquina virtual 23022RECDF",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 15,
        "w": 3,
        "x": 12,
        "y": 19
      },
      "id": 69,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "(() => {\n  const getLastValue = (fieldName) => {\n    const series = data.series.find(s => s.name.includes(fieldName));\n    if (!series) return null;\n    const field = series.fields[1] || series.fields[0];\n    if (!field || !field.values) return null;\n    return field.values.get(field.values.length - 1);\n  };\n\n  const formatBytesToGB = (bytes) => {\n    if (bytes === null || bytes === undefined || isNaN(bytes)) return '--';\n    return (bytes / (1024 ** 3)).toFixed(2);\n  };\n\n  const formatPercent = (used, total) => {\n    if (used == null || total == null || isNaN(used) || isNaN(total) || total === 0) return '--';\n    return ((used / total) * 100).toFixed(1);\n  };\n\n  const parseUptimeText = (text) => {\n    if (!text || typeof text !== 'string') return '--';\n    const diasMatch = text.match(/(\\d+)\\s*dias?/i);\n    const horasMatch = text.match(/(\\d+)\\s*horas?/i);\n    const minutosMatch = text.match(/(\\d+)\\s*minutos?/i);\n    const dias = diasMatch ? parseInt(diasMatch[1], 10) : 0;\n    const horas = horasMatch ? parseInt(horasMatch[1], 10) : 0;\n    const minutos = minutosMatch ? parseInt(minutosMatch[1], 10) : 0;\n    return { formatted: `${dias}d ${horas}h ${minutos}m`, dias };\n  };\n\n  const extractVMName = () => {\n    const serie = data.series.find(s => s.name.includes(' - '));\n    if (!serie) return '';\n    const parts = serie.name.split(' - ');\n    return parts.length > 1 ? parts[1].trim() : '';\n  };\n\n  const getUptimeAlert = (dias) => {\n    if (dias > 30) {\n      return { color: '#d32f2f', text: '⚠️ Uptime muito alto!' };\n    } else if (dias > 20) {\n      return { color: '#fbc02d', text: '⚠️ Uptime alto!' };\n    } else if (dias > 11) {\n      return { color: '#1976d2', text: '⏳ Uptime médio' };\n    }\n    return { color: '#4caf50', text: '✔️ Uptime normal' };\n  };\n\n  const vmName = extractVMName();\n  const uptimeRaw = getLastValue('Uptime da VM');\n  const { formatted: uptime, dias: uptimeDias } = parseUptimeText(uptimeRaw);\n  const uptimeAlert = getUptimeAlert(uptimeDias);\n\n  const discoTotalBytes = getLastValue('Disco total');\n  const discoUtilizadoBytes = getLastValue('Disco utilizado');\n  const discoTotalGB = formatBytesToGB(discoTotalBytes);\n  const discoUtilizadoGB = formatBytesToGB(discoUtilizadoBytes);\n  const discoPercent = formatPercent(discoUtilizadoBytes, discoTotalBytes);\n\n  const memoriaAtribuidaGB = getLastValue('Memória atribuída');\n  const memoriaUtilizadaGB = getLastValue('Memória utilizada');\n  const memoriaTotal = memoriaAtribuidaGB !== null ? memoriaAtribuidaGB.toFixed(2) : '--';\n  const memoriaUsada = memoriaUtilizadaGB !== null ? memoriaUtilizadaGB.toFixed(2) : '--';\n  const memoriaPercent = formatPercent(memoriaUtilizadaGB, memoriaAtribuidaGB);\n\n  const statusValue = Number(getLastValue('Status da VM'));\n  const getStatusInfo = (status) => {\n    switch (status) {\n      case 0: return { text: 'Desligada', color: '#f44336', icon: '🔴' };\n      case 1: return { text: 'Ligada', color: '#4caf50', icon: '🟢' };\n      case 2: return { text: 'Pausada', color: '#ffeb3b', icon: '🟡' };\n      case 3: return { text: 'Salvando', color: '#2196f3', icon: '💾' };\n      default: return { text: 'Desconhecida', color: '#9e9e9e', icon: '❓' };\n    }\n  };\n  const status = getStatusInfo(statusValue);\n  const osImage = '/public/img/nilo/servidores/Linux.png'; // Imagem do sistema operacional\n\n  htmlNode.innerHTML = `\n    <style>\n      .vm-card-container {\n        background-color: #111;\n        color: #eaeaea;\n        padding: 5px 5px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0,0,0,0.5);\n        font-family: 'Segoe UI', sans-serif;\n        font-size: 14px;\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      .vm-header {\n        display: flex;\n        align-items: center;\n        margin-bottom: 16px;\n      }\n\n      .vm-os-image {\n        width: 48px;\n        height: 48px;\n        flex-shrink: 0;\n      }\n\n      .vm-name {\n        font-size: 20px;\n        font-weight: bold;\n        margin-left: 12px;\n        color: #ffffff;\n        flex-grow: 1;\n        white-space: nowrap;\n      }\n\n      .vm-card {\n        background: #1e1e1e;\n        padding: 12px 16px;\n        border-radius: 6px;\n        margin: 8px 0;\n      }\n\n      .status-icon {\n        display: inline-block;\n        font-size: 1.3em;\n        color: ${status.color};\n        animation: pulseGlow 1.5s ease-in-out infinite;\n      }\n\n      @keyframes pulseGlow {\n        0% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n        50% {\n          transform: scale(1.2);\n          text-shadow: 0 0 8px ${status.color};\n        }\n        100% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n      }\n\n      .progress-bar {\n        width: 100%;\n        height: 6px;\n        background: #333;\n        border-radius: 4px;\n        margin-top: 8px;\n      }\n\n      .progress-bar-fill {\n        height: 100%;\n      }\n\n      .highlight {\n        color: #ffeb3b;\n        font-weight: bold;\n      }\n\n      .footer-text {\n        text-align: center;\n        font-size: 12px;\n        margin-top: 16px;\n        color: #9e9e9e;\n      }\n    </style>\n\n    <div class=\"vm-card-container\">\n      <!-- Cabeçalho com imagem e nome da VM -->\n      <div class=\"vm-header\">\n        <img src=\"${osImage}\" alt=\"OS\" class=\"vm-os-image\" />\n        <div class=\"vm-name\">${vmName}</div>\n      </div>\n\n      <!-- Status -->\n      <div class=\"vm-card\">\n        <strong>Status:</strong> <span class=\"status-icon\">${status.icon}</span> ${status.text}\n      </div>\n\n      <!-- Uptime -->\n      <div class=\"vm-card\" style=\"color: ${uptimeAlert.color};\">\n        <strong>Uptime:</strong> ${uptime} <small>${uptimeAlert.text}</small>\n      </div>\n\n      <!-- Disco -->\n      <div class=\"vm-card\">\n        <strong>Disco:</strong> ${discoTotalGB} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Disco Usado:</strong> ${discoUtilizadoGB} GB (${discoPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${discoPercent}%; background: #ff9800;\"></div>\n        </div>\n      </div>\n\n      <!-- Memória -->\n      <div class=\"vm-card\">\n        <strong>Memória Total:</strong> ${memoriaTotal} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Memória Usada:</strong> ${memoriaUsada} GB (${memoriaPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${memoriaPercent}%; background: #4caf50;\"></div>\n        </div>\n      </div>\n\n      <div class=\"footer-text\">\n        <small>Monitoramento em tempo real</small>\n      </div>\n    </div>\n  `;\n})();\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco total - TRACCAR"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco total",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco utilizado - TRACCAR"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco utilizado",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória atribuída (GB) - TRACCAR"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria atribuida",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória utilizada (GB) - TRACCAR"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria utilizada",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Uptime da VM TRACCAR"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: uptime"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Uptime",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Status da VM - TRACCAR"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: Status"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Status",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "description": "Descrição da maquina virtual 23022RECDF",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 15,
        "w": 3,
        "x": 15,
        "y": 19
      },
      "id": 66,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "(() => {\n  const getLastValue = (fieldName) => {\n    const series = data.series.find(s => s.name.includes(fieldName));\n    if (!series) return null;\n    const field = series.fields[1] || series.fields[0];\n    if (!field || !field.values) return null;\n    return field.values.get(field.values.length - 1);\n  };\n\n  const formatBytesToGB = (bytes) => {\n    if (bytes === null || bytes === undefined || isNaN(bytes)) return '--';\n    return (bytes / (1024 ** 3)).toFixed(2);\n  };\n\n  const formatPercent = (used, total) => {\n    if (used == null || total == null || isNaN(used) || isNaN(total) || total === 0) return '--';\n    return ((used / total) * 100).toFixed(1);\n  };\n\n  const parseUptimeText = (text) => {\n    if (!text || typeof text !== 'string') return '--';\n    const diasMatch = text.match(/(\\d+)\\s*dias?/i);\n    const horasMatch = text.match(/(\\d+)\\s*horas?/i);\n    const minutosMatch = text.match(/(\\d+)\\s*minutos?/i);\n    const dias = diasMatch ? parseInt(diasMatch[1], 10) : 0;\n    const horas = horasMatch ? parseInt(horasMatch[1], 10) : 0;\n    const minutos = minutosMatch ? parseInt(minutosMatch[1], 10) : 0;\n    return { formatted: `${dias}d ${horas}h ${minutos}m`, dias };\n  };\n\n  const extractVMName = () => {\n    const serie = data.series.find(s => s.name.includes(' - '));\n    if (!serie) return '';\n    const parts = serie.name.split(' - ');\n    return parts.length > 1 ? parts[1].trim() : '';\n  };\n\n  const getUptimeAlert = (dias) => {\n    if (dias > 30) {\n      return { color: '#d32f2f', text: '⚠️ Uptime muito alto!' };\n    } else if (dias > 20) {\n      return { color: '#fbc02d', text: '⚠️ Uptime alto!' };\n    } else if (dias > 11) {\n      return { color: '#1976d2', text: '⏳ Uptime médio' };\n    }\n    return { color: '#4caf50', text: '✔️ Uptime normal' };\n  };\n\n  const vmName = extractVMName();\n  const uptimeRaw = getLastValue('Uptime da VM');\n  const { formatted: uptime, dias: uptimeDias } = parseUptimeText(uptimeRaw);\n  const uptimeAlert = getUptimeAlert(uptimeDias);\n\n  const discoTotalBytes = getLastValue('Disco total');\n  const discoUtilizadoBytes = getLastValue('Disco utilizado');\n  const discoTotalGB = formatBytesToGB(discoTotalBytes);\n  const discoUtilizadoGB = formatBytesToGB(discoUtilizadoBytes);\n  const discoPercent = formatPercent(discoUtilizadoBytes, discoTotalBytes);\n\n  const memoriaAtribuidaGB = getLastValue('Memória atribuída');\n  const memoriaUtilizadaGB = getLastValue('Memória utilizada');\n  const memoriaTotal = memoriaAtribuidaGB !== null ? memoriaAtribuidaGB.toFixed(2) : '--';\n  const memoriaUsada = memoriaUtilizadaGB !== null ? memoriaUtilizadaGB.toFixed(2) : '--';\n  const memoriaPercent = formatPercent(memoriaUtilizadaGB, memoriaAtribuidaGB);\n\n  const statusValue = Number(getLastValue('Status da VM'));\n  const getStatusInfo = (status) => {\n    switch (status) {\n      case 0: return { text: 'Desligada', color: '#f44336', icon: '🔴' };\n      case 1: return { text: 'Ligada', color: '#4caf50', icon: '🟢' };\n      case 2: return { text: 'Pausada', color: '#ffeb3b', icon: '🟡' };\n      case 3: return { text: 'Salvando', color: '#2196f3', icon: '💾' };\n      default: return { text: 'Desconhecida', color: '#9e9e9e', icon: '❓' };\n    }\n  };\n  const status = getStatusInfo(statusValue);\n  const osImage = '/public/img/nilo/servidores/Linux.png'; // Imagem do sistema operacional\n\n  htmlNode.innerHTML = `\n    <style>\n      .vm-card-container {\n        background-color: #111;\n        color: #eaeaea;\n        padding: 5px 5px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0,0,0,0.5);\n        font-family: 'Segoe UI', sans-serif;\n        font-size: 14px;\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      .vm-header {\n        display: flex;\n        align-items: center;\n        margin-bottom: 16px;\n      }\n\n      .vm-os-image {\n        width: 48px;\n        height: 48px;\n        flex-shrink: 0;\n      }\n\n      .vm-name {\n        font-size: 20px;\n        font-weight: bold;\n        margin-left: 12px;\n        color: #ffffff;\n        flex-grow: 1;\n        white-space: nowrap;\n      }\n\n      .vm-card {\n        background: #1e1e1e;\n        padding: 12px 16px;\n        border-radius: 6px;\n        margin: 8px 0;\n      }\n\n      .status-icon {\n        display: inline-block;\n        font-size: 1.3em;\n        color: ${status.color};\n        animation: pulseGlow 1.5s ease-in-out infinite;\n      }\n\n      @keyframes pulseGlow {\n        0% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n        50% {\n          transform: scale(1.2);\n          text-shadow: 0 0 8px ${status.color};\n        }\n        100% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n      }\n\n      .progress-bar {\n        width: 100%;\n        height: 6px;\n        background: #333;\n        border-radius: 4px;\n        margin-top: 8px;\n      }\n\n      .progress-bar-fill {\n        height: 100%;\n      }\n\n      .highlight {\n        color: #ffeb3b;\n        font-weight: bold;\n      }\n\n      .footer-text {\n        text-align: center;\n        font-size: 12px;\n        margin-top: 16px;\n        color: #9e9e9e;\n      }\n    </style>\n\n    <div class=\"vm-card-container\">\n      <!-- Cabeçalho com imagem e nome da VM -->\n      <div class=\"vm-header\">\n        <img src=\"${osImage}\" alt=\"OS\" class=\"vm-os-image\" />\n        <div class=\"vm-name\">${vmName}</div>\n      </div>\n\n      <!-- Status -->\n      <div class=\"vm-card\">\n        <strong>Status:</strong> <span class=\"status-icon\">${status.icon}</span> ${status.text}\n      </div>\n\n      <!-- Uptime -->\n      <div class=\"vm-card\" style=\"color: ${uptimeAlert.color};\">\n        <strong>Uptime:</strong> ${uptime} <small>${uptimeAlert.text}</small>\n      </div>\n\n      <!-- Disco -->\n      <div class=\"vm-card\">\n        <strong>Disco:</strong> ${discoTotalGB} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Disco Usado:</strong> ${discoUtilizadoGB} GB (${discoPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${discoPercent}%; background: #ff9800;\"></div>\n        </div>\n      </div>\n\n      <!-- Memória -->\n      <div class=\"vm-card\">\n        <strong>Memória Total:</strong> ${memoriaTotal} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Memória Usada:</strong> ${memoriaUsada} GB (${memoriaPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${memoriaPercent}%; background: #4caf50;\"></div>\n        </div>\n      </div>\n\n      <div class=\"footer-text\">\n        <small>Monitoramento em tempo real</small>\n      </div>\n    </div>\n  `;\n})();\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco total - 25224RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco total",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco utilizado - 25224RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco utilizado",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória atribuída (GB) - 25224RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria atribuida",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória utilizada (GB) - 25224RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria utilizada",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Uptime da VM 25224RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: uptime"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Uptime",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Status da VM - 25224RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: Status"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Status",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "description": "Descrição da maquina virtual 23022RECDF",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 15,
        "w": 3,
        "x": 18,
        "y": 19
      },
      "id": 67,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "(() => {\n  const getLastValue = (fieldName) => {\n    const series = data.series.find(s => s.name.includes(fieldName));\n    if (!series) return null;\n    const field = series.fields[1] || series.fields[0];\n    if (!field || !field.values) return null;\n    return field.values.get(field.values.length - 1);\n  };\n\n  const formatBytesToGB = (bytes) => {\n    if (bytes === null || bytes === undefined || isNaN(bytes)) return '--';\n    return (bytes / (1024 ** 3)).toFixed(2);\n  };\n\n  const formatPercent = (used, total) => {\n    if (used == null || total == null || isNaN(used) || isNaN(total) || total === 0) return '--';\n    return ((used / total) * 100).toFixed(1);\n  };\n\n  const parseUptimeText = (text) => {\n    if (!text || typeof text !== 'string') return '--';\n    const diasMatch = text.match(/(\\d+)\\s*dias?/i);\n    const horasMatch = text.match(/(\\d+)\\s*horas?/i);\n    const minutosMatch = text.match(/(\\d+)\\s*minutos?/i);\n    const dias = diasMatch ? parseInt(diasMatch[1], 10) : 0;\n    const horas = horasMatch ? parseInt(horasMatch[1], 10) : 0;\n    const minutos = minutosMatch ? parseInt(minutosMatch[1], 10) : 0;\n    return { formatted: `${dias}d ${horas}h ${minutos}m`, dias };\n  };\n\n  const extractVMName = () => {\n    const serie = data.series.find(s => s.name.includes(' - '));\n    if (!serie) return '';\n    const parts = serie.name.split(' - ');\n    return parts.length > 1 ? parts[1].trim() : '';\n  };\n\n  const getUptimeAlert = (dias) => {\n    if (dias > 30) {\n      return { color: '#d32f2f', text: '⚠️ Uptime muito alto!' };\n    } else if (dias > 20) {\n      return { color: '#fbc02d', text: '⚠️ Uptime alto!' };\n    } else if (dias > 11) {\n      return { color: '#1976d2', text: '⏳ Uptime médio' };\n    }\n    return { color: '#4caf50', text: '✔️ Uptime normal' };\n  };\n\n  const vmName = extractVMName();\n  const uptimeRaw = getLastValue('Uptime da VM');\n  const { formatted: uptime, dias: uptimeDias } = parseUptimeText(uptimeRaw);\n  const uptimeAlert = getUptimeAlert(uptimeDias);\n\n  const discoTotalBytes = getLastValue('Disco total');\n  const discoUtilizadoBytes = getLastValue('Disco utilizado');\n  const discoTotalGB = formatBytesToGB(discoTotalBytes);\n  const discoUtilizadoGB = formatBytesToGB(discoUtilizadoBytes);\n  const discoPercent = formatPercent(discoUtilizadoBytes, discoTotalBytes);\n\n  const memoriaAtribuidaGB = getLastValue('Memória atribuída');\n  const memoriaUtilizadaGB = getLastValue('Memória utilizada');\n  const memoriaTotal = memoriaAtribuidaGB !== null ? memoriaAtribuidaGB.toFixed(2) : '--';\n  const memoriaUsada = memoriaUtilizadaGB !== null ? memoriaUtilizadaGB.toFixed(2) : '--';\n  const memoriaPercent = formatPercent(memoriaUtilizadaGB, memoriaAtribuidaGB);\n\n  const statusValue = Number(getLastValue('Status da VM'));\n  const getStatusInfo = (status) => {\n    switch (status) {\n      case 0: return { text: 'Desligada', color: '#f44336', icon: '🔴' };\n      case 1: return { text: 'Ligada', color: '#4caf50', icon: '🟢' };\n      case 2: return { text: 'Pausada', color: '#ffeb3b', icon: '🟡' };\n      case 3: return { text: 'Salvando', color: '#2196f3', icon: '💾' };\n      default: return { text: 'Desconhecida', color: '#9e9e9e', icon: '❓' };\n    }\n  };\n  const status = getStatusInfo(statusValue);\n  const osImage = '/public/img/nilo/servidores/Linux.png'; // Imagem do sistema operacional\n\n  htmlNode.innerHTML = `\n    <style>\n      .vm-card-container {\n        background-color: #111;\n        color: #eaeaea;\n        padding: 5px 5px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0,0,0,0.5);\n        font-family: 'Segoe UI', sans-serif;\n        font-size: 14px;\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      .vm-header {\n        display: flex;\n        align-items: center;\n        margin-bottom: 16px;\n      }\n\n      .vm-os-image {\n        width: 48px;\n        height: 48px;\n        flex-shrink: 0;\n      }\n\n      .vm-name {\n        font-size: 20px;\n        font-weight: bold;\n        margin-left: 12px;\n        color: #ffffff;\n        flex-grow: 1;\n        white-space: nowrap;\n      }\n\n      .vm-card {\n        background: #1e1e1e;\n        padding: 12px 16px;\n        border-radius: 6px;\n        margin: 8px 0;\n      }\n\n      .status-icon {\n        display: inline-block;\n        font-size: 1.3em;\n        color: ${status.color};\n        animation: pulseGlow 1.5s ease-in-out infinite;\n      }\n\n      @keyframes pulseGlow {\n        0% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n        50% {\n          transform: scale(1.2);\n          text-shadow: 0 0 8px ${status.color};\n        }\n        100% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n      }\n\n      .progress-bar {\n        width: 100%;\n        height: 6px;\n        background: #333;\n        border-radius: 4px;\n        margin-top: 8px;\n      }\n\n      .progress-bar-fill {\n        height: 100%;\n      }\n\n      .highlight {\n        color: #ffeb3b;\n        font-weight: bold;\n      }\n\n      .footer-text {\n        text-align: center;\n        font-size: 12px;\n        margin-top: 16px;\n        color: #9e9e9e;\n      }\n    </style>\n\n    <div class=\"vm-card-container\">\n      <!-- Cabeçalho com imagem e nome da VM -->\n      <div class=\"vm-header\">\n        <img src=\"${osImage}\" alt=\"OS\" class=\"vm-os-image\" />\n        <div class=\"vm-name\">${vmName}</div>\n      </div>\n\n      <!-- Status -->\n      <div class=\"vm-card\">\n        <strong>Status:</strong> <span class=\"status-icon\">${status.icon}</span> ${status.text}\n      </div>\n\n      <!-- Uptime -->\n      <div class=\"vm-card\" style=\"color: ${uptimeAlert.color};\">\n        <strong>Uptime:</strong> ${uptime} <small>${uptimeAlert.text}</small>\n      </div>\n\n      <!-- Disco -->\n      <div class=\"vm-card\">\n        <strong>Disco:</strong> ${discoTotalGB} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Disco Usado:</strong> ${discoUtilizadoGB} GB (${discoPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${discoPercent}%; background: #ff9800;\"></div>\n        </div>\n      </div>\n\n      <!-- Memória -->\n      <div class=\"vm-card\">\n        <strong>Memória Total:</strong> ${memoriaTotal} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Memória Usada:</strong> ${memoriaUsada} GB (${memoriaPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${memoriaPercent}%; background: #4caf50;\"></div>\n        </div>\n      </div>\n\n      <div class=\"footer-text\">\n        <small>Monitoramento em tempo real</small>\n      </div>\n    </div>\n  `;\n})();\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco total - GITLAB"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco total",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco utilizado - GITLAB"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco utilizado",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória atribuída (GB) - GITLAB"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria atribuida",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória utilizada (GB) - GITLAB"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria utilizada",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Uptime da VM GITLAB"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: uptime"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Uptime",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Status da VM - GITLAB"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: Status"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Status",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
      },
      "description": "Descrição da maquina virtual 23022RECDF",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 15,
        "w": 3,
        "x": 21,
        "y": 19
      },
      "id": 65,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "\n",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "(() => {\n  const getLastValue = (fieldName) => {\n    const series = data.series.find(s => s.name.includes(fieldName));\n    if (!series) return null;\n    const field = series.fields[1] || series.fields[0];\n    if (!field || !field.values) return null;\n    return field.values.get(field.values.length - 1);\n  };\n\n  const formatBytesToGB = (bytes) => {\n    if (bytes === null || bytes === undefined || isNaN(bytes)) return '--';\n    return (bytes / (1024 ** 3)).toFixed(2);\n  };\n\n  const formatPercent = (used, total) => {\n    if (used == null || total == null || isNaN(used) || isNaN(total) || total === 0) return '--';\n    return ((used / total) * 100).toFixed(1);\n  };\n\n  const parseUptimeText = (text) => {\n    if (!text || typeof text !== 'string') return '--';\n    const diasMatch = text.match(/(\\d+)\\s*dias?/i);\n    const horasMatch = text.match(/(\\d+)\\s*horas?/i);\n    const minutosMatch = text.match(/(\\d+)\\s*minutos?/i);\n    const dias = diasMatch ? parseInt(diasMatch[1], 10) : 0;\n    const horas = horasMatch ? parseInt(horasMatch[1], 10) : 0;\n    const minutos = minutosMatch ? parseInt(minutosMatch[1], 10) : 0;\n    return { formatted: `${dias}d ${horas}h ${minutos}m`, dias };\n  };\n\n  const extractVMName = () => {\n    const serie = data.series.find(s => s.name.includes(' - '));\n    if (!serie) return '';\n    const parts = serie.name.split(' - ');\n    return parts.length > 1 ? parts[1].trim() : '';\n  };\n\n  const getUptimeAlert = (dias) => {\n    if (dias > 30) {\n      return { color: '#d32f2f', text: '⚠️ Uptime muito alto!' };\n    } else if (dias > 20) {\n      return { color: '#fbc02d', text: '⚠️ Uptime alto!' };\n    } else if (dias > 11) {\n      return { color: '#1976d2', text: '⏳ Uptime médio' };\n    }\n    return { color: '#4caf50', text: '✔️ Uptime normal' };\n  };\n\n  const vmName = extractVMName();\n  const uptimeRaw = getLastValue('Uptime da VM');\n  const { formatted: uptime, dias: uptimeDias } = parseUptimeText(uptimeRaw);\n  const uptimeAlert = getUptimeAlert(uptimeDias);\n\n  const discoTotalBytes = getLastValue('Disco total');\n  const discoUtilizadoBytes = getLastValue('Disco utilizado');\n  const discoTotalGB = formatBytesToGB(discoTotalBytes);\n  const discoUtilizadoGB = formatBytesToGB(discoUtilizadoBytes);\n  const discoPercent = formatPercent(discoUtilizadoBytes, discoTotalBytes);\n\n  const memoriaAtribuidaGB = getLastValue('Memória atribuída');\n  const memoriaUtilizadaGB = getLastValue('Memória utilizada');\n  const memoriaTotal = memoriaAtribuidaGB !== null ? memoriaAtribuidaGB.toFixed(2) : '--';\n  const memoriaUsada = memoriaUtilizadaGB !== null ? memoriaUtilizadaGB.toFixed(2) : '--';\n  const memoriaPercent = formatPercent(memoriaUtilizadaGB, memoriaAtribuidaGB);\n\n  const statusValue = Number(getLastValue('Status da VM'));\n  const getStatusInfo = (status) => {\n    switch (status) {\n      case 0: return { text: 'Desligada', color: '#f44336', icon: '🔴' };\n      case 1: return { text: 'Ligada', color: '#4caf50', icon: '🟢' };\n      case 2: return { text: 'Pausada', color: '#ffeb3b', icon: '🟡' };\n      case 3: return { text: 'Salvando', color: '#2196f3', icon: '💾' };\n      default: return { text: 'Desconhecida', color: '#9e9e9e', icon: '❓' };\n    }\n  };\n  const status = getStatusInfo(statusValue);\n  const osImage = '/public/img/nilo/servidores/windows-10.png'; // Imagem do sistema operacional\n\n  htmlNode.innerHTML = `\n    <style>\n      .vm-card-container {\n        background-color: #111;\n        color: #eaeaea;\n        padding: 5px 5px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0,0,0,0.5);\n        font-family: 'Segoe UI', sans-serif;\n        font-size: 14px;\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      .vm-header {\n        display: flex;\n        align-items: center;\n        margin-bottom: 16px;\n      }\n\n      .vm-os-image {\n        width: 48px;\n        height: 48px;\n        flex-shrink: 0;\n      }\n\n      .vm-name {\n        font-size: 20px;\n        font-weight: bold;\n        margin-left: 12px;\n        color: #ffffff;\n        flex-grow: 1;\n        white-space: nowrap;\n      }\n\n      .vm-card {\n        background: #1e1e1e;\n        padding: 12px 16px;\n        border-radius: 6px;\n        margin: 8px 0;\n      }\n\n      .status-icon {\n        display: inline-block;\n        font-size: 1.3em;\n        color: ${status.color};\n        animation: pulseGlow 1.5s ease-in-out infinite;\n      }\n\n      @keyframes pulseGlow {\n        0% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n        50% {\n          transform: scale(1.2);\n          text-shadow: 0 0 8px ${status.color};\n        }\n        100% {\n          transform: scale(1);\n          text-shadow: 0 0 0px ${status.color};\n        }\n      }\n\n      .progress-bar {\n        width: 100%;\n        height: 6px;\n        background: #333;\n        border-radius: 4px;\n        margin-top: 8px;\n      }\n\n      .progress-bar-fill {\n        height: 100%;\n      }\n\n      .highlight {\n        color: #ffeb3b;\n        font-weight: bold;\n      }\n\n      .footer-text {\n        text-align: center;\n        font-size: 12px;\n        margin-top: 16px;\n        color: #9e9e9e;\n      }\n    </style>\n\n    <div class=\"vm-card-container\">\n      <!-- Cabeçalho com imagem e nome da VM -->\n      <div class=\"vm-header\">\n        <img src=\"${osImage}\" alt=\"OS\" class=\"vm-os-image\" />\n        <div class=\"vm-name\">${vmName}</div>\n      </div>\n\n      <!-- Status -->\n      <div class=\"vm-card\">\n        <strong>Status:</strong> <span class=\"status-icon\">${status.icon}</span> ${status.text}\n      </div>\n\n      <!-- Uptime -->\n      <div class=\"vm-card\" style=\"color: ${uptimeAlert.color};\">\n        <strong>Uptime:</strong> ${uptime} <small>${uptimeAlert.text}</small>\n      </div>\n\n      <!-- Disco -->\n      <div class=\"vm-card\">\n        <strong>Disco:</strong> ${discoTotalGB} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Disco Usado:</strong> ${discoUtilizadoGB} GB (${discoPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${discoPercent}%; background: #ff9800;\"></div>\n        </div>\n      </div>\n\n      <!-- Memória -->\n      <div class=\"vm-card\">\n        <strong>Memória Total:</strong> ${memoriaTotal} GB\n      </div>\n\n      <div class=\"vm-card\">\n        <strong>Memória Usada:</strong> ${memoriaUsada} GB (${memoriaPercent}%)\n        <div class=\"progress-bar\">\n          <div class=\"progress-bar-fill\" style=\"width: ${memoriaPercent}%; background: #4caf50;\"></div>\n        </div>\n      </div>\n\n      <div class=\"footer-text\">\n        <small>Monitoramento em tempo real</small>\n      </div>\n    </div>\n  `;\n})();\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco total - 24140RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco total",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Disco utilizado - 24140RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: disco"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Disco utilizado",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória atribuída (GB) - 24140RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria atribuida",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Memória utilizada (GB) - 24140RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Memoria utilizada",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Uptime da VM 24140RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: uptime"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "Uptime",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ALEXANDERZOBNIN-ZABBIX-DATASOURCE}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "Servidor - 25052RECDF"
          },
          "item": {
            "filter": "Status da VM - 24140RECDF"
          },
          "itemTag": {
            "filter": "Dados_VM-Hyperv: Status"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "Status",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "gridPos": {
        "h": 2,
        "w": 24,
        "x": 0,
        "y": 34
      },
      "id": 35,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"font-size:16px; text-align:center; font-family:'Segoe UI', sans-serif; color:#ffffff; background:linear-gradient(to right, #333333, #000000); padding:12px 0; text-shadow:1px 1px 3px rgba(0,0,0,0.6); font-weight:300; border-radius:6px;\">\r\n  Tecnologia da Informação Record Brasília\r\n</div>\r\n",
        "mode": "html"
      },
      "pluginVersion": "12.0.0",
      "transparent": true,
      "type": "text"
    }
  ],
  "refresh": "5m",
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-12h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "America/Sao_Paulo",
  "title": "DASHBOARD HYPERVISOR 52",
  "uid": "442aca76-4461-49bf-bcda-db512baec896",
  "version": 1,
  "weekStart": ""
}